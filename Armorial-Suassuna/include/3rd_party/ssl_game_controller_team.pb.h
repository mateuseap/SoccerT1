// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_team.proto

#ifndef PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fteam_2eproto
#define PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fteam_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_event_2019.pb.h"
#include "ssl_game_controller_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto 

namespace protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto
class AdvantageChoice;
class AdvantageChoiceDefaultTypeInternal;
extern AdvantageChoiceDefaultTypeInternal _AdvantageChoice_default_instance_;
class ControllerToTeam;
class ControllerToTeamDefaultTypeInternal;
extern ControllerToTeamDefaultTypeInternal _ControllerToTeam_default_instance_;
class TeamRegistration;
class TeamRegistrationDefaultTypeInternal;
extern TeamRegistrationDefaultTypeInternal _TeamRegistration_default_instance_;
class TeamToController;
class TeamToControllerDefaultTypeInternal;
extern TeamToControllerDefaultTypeInternal _TeamToController_default_instance_;
namespace google {
namespace protobuf {
template<> ::AdvantageChoice* Arena::CreateMaybeMessage<::AdvantageChoice>(Arena*);
template<> ::ControllerToTeam* Arena::CreateMaybeMessage<::ControllerToTeam>(Arena*);
template<> ::TeamRegistration* Arena::CreateMaybeMessage<::TeamRegistration>(Arena*);
template<> ::TeamToController* Arena::CreateMaybeMessage<::TeamToController>(Arena*);
}  // namespace protobuf
}  // namespace google

enum TeamToController_AdvantageResponse {
  TeamToController_AdvantageResponse_STOP = 0,
  TeamToController_AdvantageResponse_CONTINUE = 1,
  TeamToController_AdvantageResponse_UNDECIDED = 0
};
bool TeamToController_AdvantageResponse_IsValid(int value);
const TeamToController_AdvantageResponse TeamToController_AdvantageResponse_AdvantageResponse_MIN = TeamToController_AdvantageResponse_STOP;
const TeamToController_AdvantageResponse TeamToController_AdvantageResponse_AdvantageResponse_MAX = TeamToController_AdvantageResponse_CONTINUE;
const int TeamToController_AdvantageResponse_AdvantageResponse_ARRAYSIZE = TeamToController_AdvantageResponse_AdvantageResponse_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamToController_AdvantageResponse_descriptor();
inline const ::std::string& TeamToController_AdvantageResponse_Name(TeamToController_AdvantageResponse value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamToController_AdvantageResponse_descriptor(), value);
}
inline bool TeamToController_AdvantageResponse_Parse(
    const ::std::string& name, TeamToController_AdvantageResponse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamToController_AdvantageResponse>(
    TeamToController_AdvantageResponse_descriptor(), name, value);
}
enum AdvantageChoice_Foul {
  AdvantageChoice_Foul_UNKNOWN = 0,
  AdvantageChoice_Foul_COLLISION = 1,
  AdvantageChoice_Foul_PUSHING = 2,
  AdvantageChoice_Foul_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = 3
};
bool AdvantageChoice_Foul_IsValid(int value);
const AdvantageChoice_Foul AdvantageChoice_Foul_Foul_MIN = AdvantageChoice_Foul_UNKNOWN;
const AdvantageChoice_Foul AdvantageChoice_Foul_Foul_MAX = AdvantageChoice_Foul_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
const int AdvantageChoice_Foul_Foul_ARRAYSIZE = AdvantageChoice_Foul_Foul_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdvantageChoice_Foul_descriptor();
inline const ::std::string& AdvantageChoice_Foul_Name(AdvantageChoice_Foul value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdvantageChoice_Foul_descriptor(), value);
}
inline bool AdvantageChoice_Foul_Parse(
    const ::std::string& name, AdvantageChoice_Foul* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdvantageChoice_Foul>(
    AdvantageChoice_Foul_descriptor(), name, value);
}
// ===================================================================

class TeamRegistration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRegistration) */ {
 public:
  TeamRegistration();
  virtual ~TeamRegistration();

  TeamRegistration(const TeamRegistration& from);

  inline TeamRegistration& operator=(const TeamRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRegistration(TeamRegistration&& from) noexcept
    : TeamRegistration() {
    *this = ::std::move(from);
  }

  inline TeamRegistration& operator=(TeamRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamRegistration* internal_default_instance() {
    return reinterpret_cast<const TeamRegistration*>(
               &_TeamRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TeamRegistration* other);
  friend void swap(TeamRegistration& a, TeamRegistration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRegistration* New() const final {
    return CreateMaybeMessage<TeamRegistration>(NULL);
  }

  TeamRegistration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamRegistration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamRegistration& from);
  void MergeFrom(const TeamRegistration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string team_name = 1;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional .Signature signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  private:
  const ::Signature& _internal_signature() const;
  public:
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // @@protoc_insertion_point(class_scope:TeamRegistration)
 private:
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::Signature* signature_;
  friend struct ::protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamToController : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamToController) */ {
 public:
  TeamToController();
  virtual ~TeamToController();

  TeamToController(const TeamToController& from);

  inline TeamToController& operator=(const TeamToController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamToController(TeamToController&& from) noexcept
    : TeamToController() {
    *this = ::std::move(from);
  }

  inline TeamToController& operator=(TeamToController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamToController& default_instance();

  enum MsgCase {
    kDesiredKeeper = 2,
    kAdvantageResponse = 3,
    kSubstituteBot = 4,
    kPing = 5,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamToController* internal_default_instance() {
    return reinterpret_cast<const TeamToController*>(
               &_TeamToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TeamToController* other);
  friend void swap(TeamToController& a, TeamToController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamToController* New() const final {
    return CreateMaybeMessage<TeamToController>(NULL);
  }

  TeamToController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamToController>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamToController& from);
  void MergeFrom(const TeamToController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamToController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TeamToController_AdvantageResponse AdvantageResponse;
  static const AdvantageResponse STOP =
    TeamToController_AdvantageResponse_STOP;
  static const AdvantageResponse CONTINUE =
    TeamToController_AdvantageResponse_CONTINUE;
  static const AdvantageResponse UNDECIDED =
    TeamToController_AdvantageResponse_UNDECIDED;
  static inline bool AdvantageResponse_IsValid(int value) {
    return TeamToController_AdvantageResponse_IsValid(value);
  }
  static const AdvantageResponse AdvantageResponse_MIN =
    TeamToController_AdvantageResponse_AdvantageResponse_MIN;
  static const AdvantageResponse AdvantageResponse_MAX =
    TeamToController_AdvantageResponse_AdvantageResponse_MAX;
  static const int AdvantageResponse_ARRAYSIZE =
    TeamToController_AdvantageResponse_AdvantageResponse_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdvantageResponse_descriptor() {
    return TeamToController_AdvantageResponse_descriptor();
  }
  static inline const ::std::string& AdvantageResponse_Name(AdvantageResponse value) {
    return TeamToController_AdvantageResponse_Name(value);
  }
  static inline bool AdvantageResponse_Parse(const ::std::string& name,
      AdvantageResponse* value) {
    return TeamToController_AdvantageResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Signature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  private:
  const ::Signature& _internal_signature() const;
  public:
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // optional int32 desired_keeper = 2;
  bool has_desired_keeper() const;
  void clear_desired_keeper();
  static const int kDesiredKeeperFieldNumber = 2;
  ::google::protobuf::int32 desired_keeper() const;
  void set_desired_keeper(::google::protobuf::int32 value);

  // optional .TeamToController.AdvantageResponse advantage_response = 3;
  bool has_advantage_response() const;
  void clear_advantage_response();
  static const int kAdvantageResponseFieldNumber = 3;
  ::TeamToController_AdvantageResponse advantage_response() const;
  void set_advantage_response(::TeamToController_AdvantageResponse value);

  // optional bool substitute_bot = 4;
  bool has_substitute_bot() const;
  void clear_substitute_bot();
  static const int kSubstituteBotFieldNumber = 4;
  bool substitute_bot() const;
  void set_substitute_bot(bool value);

  // optional bool ping = 5;
  bool has_ping() const;
  void clear_ping();
  static const int kPingFieldNumber = 5;
  bool ping() const;
  void set_ping(bool value);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:TeamToController)
 private:
  void set_has_signature();
  void clear_has_signature();
  void set_has_desired_keeper();
  void set_has_advantage_response();
  void set_has_substitute_bot();
  void set_has_ping();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Signature* signature_;
  union MsgUnion {
    MsgUnion() {}
    ::google::protobuf::int32 desired_keeper_;
    int advantage_response_;
    bool substitute_bot_;
    bool ping_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerToTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ControllerToTeam) */ {
 public:
  ControllerToTeam();
  virtual ~ControllerToTeam();

  ControllerToTeam(const ControllerToTeam& from);

  inline ControllerToTeam& operator=(const ControllerToTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerToTeam(ControllerToTeam&& from) noexcept
    : ControllerToTeam() {
    *this = ::std::move(from);
  }

  inline ControllerToTeam& operator=(ControllerToTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerToTeam& default_instance();

  enum MsgCase {
    kControllerReply = 1,
    kAdvantageChoice = 2,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerToTeam* internal_default_instance() {
    return reinterpret_cast<const ControllerToTeam*>(
               &_ControllerToTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ControllerToTeam* other);
  friend void swap(ControllerToTeam& a, ControllerToTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerToTeam* New() const final {
    return CreateMaybeMessage<ControllerToTeam>(NULL);
  }

  ControllerToTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerToTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerToTeam& from);
  void MergeFrom(const ControllerToTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  void clear_controller_reply();
  static const int kControllerReplyFieldNumber = 1;
  private:
  const ::ControllerReply& _internal_controller_reply() const;
  public:
  const ::ControllerReply& controller_reply() const;
  ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);

  // optional .AdvantageChoice advantage_choice = 2;
  bool has_advantage_choice() const;
  void clear_advantage_choice();
  static const int kAdvantageChoiceFieldNumber = 2;
  private:
  const ::AdvantageChoice& _internal_advantage_choice() const;
  public:
  const ::AdvantageChoice& advantage_choice() const;
  ::AdvantageChoice* release_advantage_choice();
  ::AdvantageChoice* mutable_advantage_choice();
  void set_allocated_advantage_choice(::AdvantageChoice* advantage_choice);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ControllerToTeam)
 private:
  void set_has_controller_reply();
  void set_has_advantage_choice();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union MsgUnion {
    MsgUnion() {}
    ::ControllerReply* controller_reply_;
    ::AdvantageChoice* advantage_choice_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdvantageChoice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AdvantageChoice) */ {
 public:
  AdvantageChoice();
  virtual ~AdvantageChoice();

  AdvantageChoice(const AdvantageChoice& from);

  inline AdvantageChoice& operator=(const AdvantageChoice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdvantageChoice(AdvantageChoice&& from) noexcept
    : AdvantageChoice() {
    *this = ::std::move(from);
  }

  inline AdvantageChoice& operator=(AdvantageChoice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvantageChoice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvantageChoice* internal_default_instance() {
    return reinterpret_cast<const AdvantageChoice*>(
               &_AdvantageChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AdvantageChoice* other);
  friend void swap(AdvantageChoice& a, AdvantageChoice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdvantageChoice* New() const final {
    return CreateMaybeMessage<AdvantageChoice>(NULL);
  }

  AdvantageChoice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdvantageChoice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdvantageChoice& from);
  void MergeFrom(const AdvantageChoice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvantageChoice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AdvantageChoice_Foul Foul;
  static const Foul UNKNOWN =
    AdvantageChoice_Foul_UNKNOWN;
  static const Foul COLLISION =
    AdvantageChoice_Foul_COLLISION;
  static const Foul PUSHING =
    AdvantageChoice_Foul_PUSHING;
  static const Foul ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA =
    AdvantageChoice_Foul_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
  static inline bool Foul_IsValid(int value) {
    return AdvantageChoice_Foul_IsValid(value);
  }
  static const Foul Foul_MIN =
    AdvantageChoice_Foul_Foul_MIN;
  static const Foul Foul_MAX =
    AdvantageChoice_Foul_Foul_MAX;
  static const int Foul_ARRAYSIZE =
    AdvantageChoice_Foul_Foul_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Foul_descriptor() {
    return AdvantageChoice_Foul_descriptor();
  }
  static inline const ::std::string& Foul_Name(Foul value) {
    return AdvantageChoice_Foul_Name(value);
  }
  static inline bool Foul_Parse(const ::std::string& name,
      Foul* value) {
    return AdvantageChoice_Foul_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
  bool has_bot_crash_unique() const;
  void clear_bot_crash_unique();
  static const int kBotCrashUniqueFieldNumber = 2;
  private:
  const ::GameEvent_BotCrashUnique& _internal_bot_crash_unique() const;
  public:
  const ::GameEvent_BotCrashUnique& bot_crash_unique() const;
  ::GameEvent_BotCrashUnique* release_bot_crash_unique();
  ::GameEvent_BotCrashUnique* mutable_bot_crash_unique();
  void set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique);

  // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
  bool has_bot_pushed_bot() const;
  void clear_bot_pushed_bot();
  static const int kBotPushedBotFieldNumber = 3;
  private:
  const ::GameEvent_BotPushedBot& _internal_bot_pushed_bot() const;
  public:
  const ::GameEvent_BotPushedBot& bot_pushed_bot() const;
  ::GameEvent_BotPushedBot* release_bot_pushed_bot();
  ::GameEvent_BotPushedBot* mutable_bot_pushed_bot();
  void set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot);

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
  bool has_attacker_touched_opponent_in_defense_area() const;
  void clear_attacker_touched_opponent_in_defense_area();
  static const int kAttackerTouchedOpponentInDefenseAreaFieldNumber = 4;
  private:
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea& _internal_attacker_touched_opponent_in_defense_area() const;
  public:
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area() const;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* release_attacker_touched_opponent_in_defense_area();
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* mutable_attacker_touched_opponent_in_defense_area();
  void set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area);

  // required .AdvantageChoice.Foul foul = 1;
  bool has_foul() const;
  void clear_foul();
  static const int kFoulFieldNumber = 1;
  ::AdvantageChoice_Foul foul() const;
  void set_foul(::AdvantageChoice_Foul value);

  // @@protoc_insertion_point(class_scope:AdvantageChoice)
 private:
  void set_has_foul();
  void clear_has_foul();
  void set_has_bot_crash_unique();
  void clear_has_bot_crash_unique();
  void set_has_bot_pushed_bot();
  void clear_has_bot_pushed_bot();
  void set_has_attacker_touched_opponent_in_defense_area();
  void clear_has_attacker_touched_opponent_in_defense_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::GameEvent_BotCrashUnique* bot_crash_unique_;
  ::GameEvent_BotPushedBot* bot_pushed_bot_;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
  int foul_;
  friend struct ::protobuf_ssl_5fgame_5fcontroller_5fteam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamRegistration

// required string team_name = 1;
inline bool TeamRegistration::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRegistration::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRegistration::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRegistration::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& TeamRegistration::team_name() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.team_name)
  return team_name_.GetNoArena();
}
inline void TeamRegistration::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRegistration.team_name)
}
#if LANG_CXX11
inline void TeamRegistration::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRegistration.team_name)
}
#endif
inline void TeamRegistration::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRegistration.team_name)
}
inline void TeamRegistration::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRegistration.team_name)
}
inline ::std::string* TeamRegistration::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:TeamRegistration.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRegistration::release_team_name() {
  // @@protoc_insertion_point(field_release:TeamRegistration.team_name)
  if (!has_team_name()) {
    return NULL;
  }
  clear_has_team_name();
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRegistration::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.team_name)
}

// optional .Signature signature = 2;
inline bool TeamRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRegistration::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRegistration::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Signature& TeamRegistration::_internal_signature() const {
  return *signature_;
}
inline const ::Signature& TeamRegistration::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:TeamRegistration.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* TeamRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:TeamRegistration.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::Signature* TeamRegistration::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TeamRegistration.signature)
  return signature_;
}
inline void TeamRegistration::set_allocated_signature(::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.signature)
}

// -------------------------------------------------------------------

// TeamToController

// optional .Signature signature = 1;
inline bool TeamToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamToController::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamToController::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Signature& TeamToController::_internal_signature() const {
  return *signature_;
}
inline const ::Signature& TeamToController::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:TeamToController.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* TeamToController::release_signature() {
  // @@protoc_insertion_point(field_release:TeamToController.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::Signature* TeamToController::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TeamToController.signature)
  return signature_;
}
inline void TeamToController::set_allocated_signature(::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:TeamToController.signature)
}

// optional int32 desired_keeper = 2;
inline bool TeamToController::has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
inline void TeamToController::set_has_desired_keeper() {
  _oneof_case_[0] = kDesiredKeeper;
}
inline void TeamToController::clear_desired_keeper() {
  if (has_desired_keeper()) {
    msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
inline ::google::protobuf::int32 TeamToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:TeamToController.desired_keeper)
  if (has_desired_keeper()) {
    return msg_.desired_keeper_;
  }
  return 0;
}
inline void TeamToController::set_desired_keeper(::google::protobuf::int32 value) {
  if (!has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  msg_.desired_keeper_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.desired_keeper)
}

// optional .TeamToController.AdvantageResponse advantage_response = 3;
inline bool TeamToController::has_advantage_response() const {
  return msg_case() == kAdvantageResponse;
}
inline void TeamToController::set_has_advantage_response() {
  _oneof_case_[0] = kAdvantageResponse;
}
inline void TeamToController::clear_advantage_response() {
  if (has_advantage_response()) {
    msg_.advantage_response_ = 0;
    clear_has_msg();
  }
}
inline ::TeamToController_AdvantageResponse TeamToController::advantage_response() const {
  // @@protoc_insertion_point(field_get:TeamToController.advantage_response)
  if (has_advantage_response()) {
    return static_cast< ::TeamToController_AdvantageResponse >(msg_.advantage_response_);
  }
  return static_cast< ::TeamToController_AdvantageResponse >(0);
}
inline void TeamToController::set_advantage_response(::TeamToController_AdvantageResponse value) {
  assert(::TeamToController_AdvantageResponse_IsValid(value));
  if (!has_advantage_response()) {
    clear_msg();
    set_has_advantage_response();
  }
  msg_.advantage_response_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.advantage_response)
}

// optional bool substitute_bot = 4;
inline bool TeamToController::has_substitute_bot() const {
  return msg_case() == kSubstituteBot;
}
inline void TeamToController::set_has_substitute_bot() {
  _oneof_case_[0] = kSubstituteBot;
}
inline void TeamToController::clear_substitute_bot() {
  if (has_substitute_bot()) {
    msg_.substitute_bot_ = false;
    clear_has_msg();
  }
}
inline bool TeamToController::substitute_bot() const {
  // @@protoc_insertion_point(field_get:TeamToController.substitute_bot)
  if (has_substitute_bot()) {
    return msg_.substitute_bot_;
  }
  return false;
}
inline void TeamToController::set_substitute_bot(bool value) {
  if (!has_substitute_bot()) {
    clear_msg();
    set_has_substitute_bot();
  }
  msg_.substitute_bot_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.substitute_bot)
}

// optional bool ping = 5;
inline bool TeamToController::has_ping() const {
  return msg_case() == kPing;
}
inline void TeamToController::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void TeamToController::clear_ping() {
  if (has_ping()) {
    msg_.ping_ = false;
    clear_has_msg();
  }
}
inline bool TeamToController::ping() const {
  // @@protoc_insertion_point(field_get:TeamToController.ping)
  if (has_ping()) {
    return msg_.ping_;
  }
  return false;
}
inline void TeamToController::set_ping(bool value) {
  if (!has_ping()) {
    clear_msg();
    set_has_ping();
  }
  msg_.ping_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.ping)
}

inline bool TeamToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void TeamToController::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline TeamToController::MsgCase TeamToController::msg_case() const {
  return TeamToController::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerToTeam

// optional .ControllerReply controller_reply = 1;
inline bool ControllerToTeam::has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline void ControllerToTeam::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
inline const ::ControllerReply& ControllerToTeam::_internal_controller_reply() const {
  return *msg_.controller_reply_;
}
inline ::ControllerReply* ControllerToTeam::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.controller_reply)
  if (has_controller_reply()) {
    clear_has_msg();
      ::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ControllerReply& ControllerToTeam::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.controller_reply)
  return has_controller_reply()
      ? *msg_.controller_reply_
      : *reinterpret_cast< ::ControllerReply*>(&::_ControllerReply_default_instance_);
}
inline ::ControllerReply* ControllerToTeam::mutable_controller_reply() {
  if (!has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = CreateMaybeMessage< ::ControllerReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.controller_reply)
  return msg_.controller_reply_;
}

// optional .AdvantageChoice advantage_choice = 2;
inline bool ControllerToTeam::has_advantage_choice() const {
  return msg_case() == kAdvantageChoice;
}
inline void ControllerToTeam::set_has_advantage_choice() {
  _oneof_case_[0] = kAdvantageChoice;
}
inline void ControllerToTeam::clear_advantage_choice() {
  if (has_advantage_choice()) {
    delete msg_.advantage_choice_;
    clear_has_msg();
  }
}
inline const ::AdvantageChoice& ControllerToTeam::_internal_advantage_choice() const {
  return *msg_.advantage_choice_;
}
inline ::AdvantageChoice* ControllerToTeam::release_advantage_choice() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.advantage_choice)
  if (has_advantage_choice()) {
    clear_has_msg();
      ::AdvantageChoice* temp = msg_.advantage_choice_;
    msg_.advantage_choice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::AdvantageChoice& ControllerToTeam::advantage_choice() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.advantage_choice)
  return has_advantage_choice()
      ? *msg_.advantage_choice_
      : *reinterpret_cast< ::AdvantageChoice*>(&::_AdvantageChoice_default_instance_);
}
inline ::AdvantageChoice* ControllerToTeam::mutable_advantage_choice() {
  if (!has_advantage_choice()) {
    clear_msg();
    set_has_advantage_choice();
    msg_.advantage_choice_ = CreateMaybeMessage< ::AdvantageChoice >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.advantage_choice)
  return msg_.advantage_choice_;
}

inline bool ControllerToTeam::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToTeam::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToTeam::MsgCase ControllerToTeam::msg_case() const {
  return ControllerToTeam::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdvantageChoice

// required .AdvantageChoice.Foul foul = 1;
inline bool AdvantageChoice::has_foul() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdvantageChoice::set_has_foul() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdvantageChoice::clear_has_foul() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdvantageChoice::clear_foul() {
  foul_ = 0;
  clear_has_foul();
}
inline ::AdvantageChoice_Foul AdvantageChoice::foul() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.foul)
  return static_cast< ::AdvantageChoice_Foul >(foul_);
}
inline void AdvantageChoice::set_foul(::AdvantageChoice_Foul value) {
  assert(::AdvantageChoice_Foul_IsValid(value));
  set_has_foul();
  foul_ = value;
  // @@protoc_insertion_point(field_set:AdvantageChoice.foul)
}

// optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
inline bool AdvantageChoice::has_bot_crash_unique() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvantageChoice::set_has_bot_crash_unique() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvantageChoice::clear_has_bot_crash_unique() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::GameEvent_BotCrashUnique& AdvantageChoice::_internal_bot_crash_unique() const {
  return *bot_crash_unique_;
}
inline const ::GameEvent_BotCrashUnique& AdvantageChoice::bot_crash_unique() const {
  const ::GameEvent_BotCrashUnique* p = bot_crash_unique_;
  // @@protoc_insertion_point(field_get:AdvantageChoice.bot_crash_unique)
  return p != NULL ? *p : *reinterpret_cast<const ::GameEvent_BotCrashUnique*>(
      &::_GameEvent_BotCrashUnique_default_instance_);
}
inline ::GameEvent_BotCrashUnique* AdvantageChoice::release_bot_crash_unique() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.bot_crash_unique)
  clear_has_bot_crash_unique();
  ::GameEvent_BotCrashUnique* temp = bot_crash_unique_;
  bot_crash_unique_ = NULL;
  return temp;
}
inline ::GameEvent_BotCrashUnique* AdvantageChoice::mutable_bot_crash_unique() {
  set_has_bot_crash_unique();
  if (bot_crash_unique_ == NULL) {
    auto* p = CreateMaybeMessage<::GameEvent_BotCrashUnique>(GetArenaNoVirtual());
    bot_crash_unique_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.bot_crash_unique)
  return bot_crash_unique_;
}
inline void AdvantageChoice::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bot_crash_unique_);
  }
  if (bot_crash_unique) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_crash_unique = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_crash_unique, submessage_arena);
    }
    set_has_bot_crash_unique();
  } else {
    clear_has_bot_crash_unique();
  }
  bot_crash_unique_ = bot_crash_unique;
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.bot_crash_unique)
}

// optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
inline bool AdvantageChoice::has_bot_pushed_bot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdvantageChoice::set_has_bot_pushed_bot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdvantageChoice::clear_has_bot_pushed_bot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::GameEvent_BotPushedBot& AdvantageChoice::_internal_bot_pushed_bot() const {
  return *bot_pushed_bot_;
}
inline const ::GameEvent_BotPushedBot& AdvantageChoice::bot_pushed_bot() const {
  const ::GameEvent_BotPushedBot* p = bot_pushed_bot_;
  // @@protoc_insertion_point(field_get:AdvantageChoice.bot_pushed_bot)
  return p != NULL ? *p : *reinterpret_cast<const ::GameEvent_BotPushedBot*>(
      &::_GameEvent_BotPushedBot_default_instance_);
}
inline ::GameEvent_BotPushedBot* AdvantageChoice::release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.bot_pushed_bot)
  clear_has_bot_pushed_bot();
  ::GameEvent_BotPushedBot* temp = bot_pushed_bot_;
  bot_pushed_bot_ = NULL;
  return temp;
}
inline ::GameEvent_BotPushedBot* AdvantageChoice::mutable_bot_pushed_bot() {
  set_has_bot_pushed_bot();
  if (bot_pushed_bot_ == NULL) {
    auto* p = CreateMaybeMessage<::GameEvent_BotPushedBot>(GetArenaNoVirtual());
    bot_pushed_bot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.bot_pushed_bot)
  return bot_pushed_bot_;
}
inline void AdvantageChoice::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bot_pushed_bot_);
  }
  if (bot_pushed_bot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_pushed_bot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot, submessage_arena);
    }
    set_has_bot_pushed_bot();
  } else {
    clear_has_bot_pushed_bot();
  }
  bot_pushed_bot_ = bot_pushed_bot;
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.bot_pushed_bot)
}

// optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
inline bool AdvantageChoice::has_attacker_touched_opponent_in_defense_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdvantageChoice::set_has_attacker_touched_opponent_in_defense_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdvantageChoice::clear_has_attacker_touched_opponent_in_defense_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& AdvantageChoice::_internal_attacker_touched_opponent_in_defense_area() const {
  return *attacker_touched_opponent_in_defense_area_;
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& AdvantageChoice::attacker_touched_opponent_in_defense_area() const {
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* p = attacker_touched_opponent_in_defense_area_;
  // @@protoc_insertion_point(field_get:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  return p != NULL ? *p : *reinterpret_cast<const ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      &::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  clear_has_attacker_touched_opponent_in_defense_area();
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = attacker_touched_opponent_in_defense_area_;
  attacker_touched_opponent_in_defense_area_ = NULL;
  return temp;
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::mutable_attacker_touched_opponent_in_defense_area() {
  set_has_attacker_touched_opponent_in_defense_area();
  if (attacker_touched_opponent_in_defense_area_ == NULL) {
    auto* p = CreateMaybeMessage<::GameEvent_AttackerTouchedOpponentInDefenseArea>(GetArenaNoVirtual());
    attacker_touched_opponent_in_defense_area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  return attacker_touched_opponent_in_defense_area_;
}
inline void AdvantageChoice::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attacker_touched_opponent_in_defense_area_);
  }
  if (attacker_touched_opponent_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area();
  } else {
    clear_has_attacker_touched_opponent_in_defense_area();
  }
  attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.attacker_touched_opponent_in_defense_area)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TeamToController_AdvantageResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamToController_AdvantageResponse>() {
  return ::TeamToController_AdvantageResponse_descriptor();
}
template <> struct is_proto_enum< ::AdvantageChoice_Foul> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AdvantageChoice_Foul>() {
  return ::AdvantageChoice_Foul_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fteam_2eproto
