// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_referee.proto

#include "ssl_referee.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssl_5fgame_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Game_Event;
}  // namespace protobuf_ssl_5fgame_5fevent_2eproto
namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<34> scc_info_GameEvent;
}  // namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto
namespace protobuf_ssl_5freferee_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5freferee_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Referee_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5freferee_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Referee_TeamInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5freferee_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProposedGameEvent;
}  // namespace protobuf_ssl_5freferee_2eproto
class Referee_TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Referee_TeamInfo>
      _instance;
} _Referee_TeamInfo_default_instance_;
class Referee_PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Referee_Point>
      _instance;
} _Referee_Point_default_instance_;
class RefereeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Referee>
      _instance;
} _Referee_default_instance_;
class ProposedGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProposedGameEvent>
      _instance;
} _ProposedGameEvent_default_instance_;
namespace protobuf_ssl_5freferee_2eproto {
static void InitDefaultsReferee_TeamInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Referee_TeamInfo_default_instance_;
    new (ptr) ::Referee_TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Referee_TeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Referee_TeamInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReferee_TeamInfo}, {}};

static void InitDefaultsReferee_Point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Referee_Point_default_instance_;
    new (ptr) ::Referee_Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Referee_Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Referee_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReferee_Point}, {}};

static void InitDefaultsReferee() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Referee_default_instance_;
    new (ptr) ::Referee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Referee::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Referee =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsReferee}, {
      &protobuf_ssl_5freferee_2eproto::scc_info_Referee_TeamInfo.base,
      &protobuf_ssl_5freferee_2eproto::scc_info_Referee_Point.base,
      &protobuf_ssl_5fgame_5fevent_2eproto::scc_info_Game_Event.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent.base,
      &protobuf_ssl_5freferee_2eproto::scc_info_ProposedGameEvent.base,}};

static void InitDefaultsProposedGameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProposedGameEvent_default_instance_;
    new (ptr) ::ProposedGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProposedGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProposedGameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProposedGameEvent}, {
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Referee_TeamInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Referee_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Referee.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProposedGameEvent.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, red_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, yellow_card_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, yellow_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, timeouts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, timeout_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, goalkeeper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, foul_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, ball_placement_failures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, can_place_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, max_allowed_bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_TeamInfo, bot_substitution_intent_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee_Point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, packet_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, stage_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, command_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, command_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, designated_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, blue_team_on_positive_half_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, game_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, next_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, game_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, proposed_game_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Referee, current_action_time_remaining_),
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  10,
  3,
  11,
  ~0u,
  ~0u,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposedGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposedGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposedGameEvent, valid_until_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposedGameEvent, proposer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposedGameEvent, game_event_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::Referee_TeamInfo)},
  { 31, 38, sizeof(::Referee_Point)},
  { 40, 60, sizeof(::Referee)},
  { 75, 83, sizeof(::ProposedGameEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Referee_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Referee_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Referee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProposedGameEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_referee.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021ssl_referee.proto\032\024ssl_game_event.prot"
      "o\032\031ssl_game_event_2019.proto\"\312\014\n\007Referee"
      "\022\030\n\020packet_timestamp\030\001 \002(\004\022\035\n\005stage\030\002 \002("
      "\0162\016.Referee.Stage\022\027\n\017stage_time_left\030\003 \001"
      "(\021\022!\n\007command\030\004 \002(\0162\020.Referee.Command\022\027\n"
      "\017command_counter\030\005 \002(\r\022\031\n\021command_timest"
      "amp\030\006 \002(\004\022!\n\006yellow\030\007 \002(\0132\021.Referee.Team"
      "Info\022\037\n\004blue\030\010 \002(\0132\021.Referee.TeamInfo\022+\n"
      "\023designated_position\030\t \001(\0132\016.Referee.Poi"
      "nt\022\"\n\032blue_team_on_positive_half\030\n \001(\010\022#"
      "\n\ngame_event\030\013 \001(\0132\013.Game_EventB\002\030\001\022&\n\014n"
      "ext_command\030\014 \001(\0162\020.Referee.Command\022\037\n\013g"
      "ame_events\030\r \003(\0132\n.GameEvent\0220\n\024proposed"
      "_game_events\030\016 \003(\0132\022.ProposedGameEvent\022%"
      "\n\035current_action_time_remaining\030\017 \001(\005\032\265\002"
      "\n\010TeamInfo\022\014\n\004name\030\001 \002(\t\022\r\n\005score\030\002 \002(\r\022"
      "\021\n\tred_cards\030\003 \002(\r\022\035\n\021yellow_card_times\030"
      "\004 \003(\rB\002\020\001\022\024\n\014yellow_cards\030\005 \002(\r\022\020\n\010timeo"
      "uts\030\006 \002(\r\022\024\n\014timeout_time\030\007 \002(\r\022\022\n\ngoalk"
      "eeper\030\010 \002(\r\022\024\n\014foul_counter\030\t \001(\r\022\037\n\027bal"
      "l_placement_failures\030\n \001(\r\022\026\n\016can_place_"
      "ball\030\014 \001(\010\022\030\n\020max_allowed_bots\030\r \001(\r\022\037\n\027"
      "bot_substitution_intent\030\016 \001(\010\032\035\n\005Point\022\t"
      "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\321\002\n\005Stage\022\031\n\025NORMAL"
      "_FIRST_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001"
      "\022\024\n\020NORMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_"
      "HALF_PRE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EX"
      "TRA_TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE"
      "\020\006\022\024\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_T"
      "IME\020\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTR"
      "A_SECOND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREA"
      "K\020\013\022\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r"
      "\"\216\003\n\007Command\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORM"
      "AL_START\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_K"
      "ICKOFF_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020"
      "\005\022\032\n\026PREPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE"
      "_PENALTY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022"
      "\024\n\020DIRECT_FREE_BLUE\020\t\022\030\n\024INDIRECT_FREE_Y"
      "ELLOW\020\n\022\026\n\022INDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEO"
      "UT_YELLOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\023\n\013GOAL_YE"
      "LLOW\020\016\032\002\010\001\022\021\n\tGOAL_BLUE\020\017\032\002\010\001\022\031\n\025BALL_PL"
      "ACEMENT_YELLOW\020\020\022\027\n\023BALL_PLACEMENT_BLUE\020"
      "\021\"]\n\021ProposedGameEvent\022\023\n\013valid_until\030\001 "
      "\002(\004\022\023\n\013proposer_id\030\002 \002(\t\022\036\n\ngame_event\030\003"
      " \002(\0132\n.GameEvent"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_referee.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgame_5fevent_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5freferee_2eproto
const ::google::protobuf::EnumDescriptor* Referee_Stage_descriptor() {
  protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5freferee_2eproto::file_level_enum_descriptors[0];
}
bool Referee_Stage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Referee_Stage Referee::NORMAL_FIRST_HALF_PRE;
const Referee_Stage Referee::NORMAL_FIRST_HALF;
const Referee_Stage Referee::NORMAL_HALF_TIME;
const Referee_Stage Referee::NORMAL_SECOND_HALF_PRE;
const Referee_Stage Referee::NORMAL_SECOND_HALF;
const Referee_Stage Referee::EXTRA_TIME_BREAK;
const Referee_Stage Referee::EXTRA_FIRST_HALF_PRE;
const Referee_Stage Referee::EXTRA_FIRST_HALF;
const Referee_Stage Referee::EXTRA_HALF_TIME;
const Referee_Stage Referee::EXTRA_SECOND_HALF_PRE;
const Referee_Stage Referee::EXTRA_SECOND_HALF;
const Referee_Stage Referee::PENALTY_SHOOTOUT_BREAK;
const Referee_Stage Referee::PENALTY_SHOOTOUT;
const Referee_Stage Referee::POST_GAME;
const Referee_Stage Referee::Stage_MIN;
const Referee_Stage Referee::Stage_MAX;
const int Referee::Stage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Referee_Command_descriptor() {
  protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5freferee_2eproto::file_level_enum_descriptors[1];
}
bool Referee_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Referee_Command Referee::HALT;
const Referee_Command Referee::STOP;
const Referee_Command Referee::NORMAL_START;
const Referee_Command Referee::FORCE_START;
const Referee_Command Referee::PREPARE_KICKOFF_YELLOW;
const Referee_Command Referee::PREPARE_KICKOFF_BLUE;
const Referee_Command Referee::PREPARE_PENALTY_YELLOW;
const Referee_Command Referee::PREPARE_PENALTY_BLUE;
const Referee_Command Referee::DIRECT_FREE_YELLOW;
const Referee_Command Referee::DIRECT_FREE_BLUE;
const Referee_Command Referee::INDIRECT_FREE_YELLOW;
const Referee_Command Referee::INDIRECT_FREE_BLUE;
const Referee_Command Referee::TIMEOUT_YELLOW;
const Referee_Command Referee::TIMEOUT_BLUE;
const Referee_Command Referee::GOAL_YELLOW;
const Referee_Command Referee::GOAL_BLUE;
const Referee_Command Referee::BALL_PLACEMENT_YELLOW;
const Referee_Command Referee::BALL_PLACEMENT_BLUE;
const Referee_Command Referee::Command_MIN;
const Referee_Command Referee::Command_MAX;
const int Referee::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Referee_TeamInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee_TeamInfo::kNameFieldNumber;
const int Referee_TeamInfo::kScoreFieldNumber;
const int Referee_TeamInfo::kRedCardsFieldNumber;
const int Referee_TeamInfo::kYellowCardTimesFieldNumber;
const int Referee_TeamInfo::kYellowCardsFieldNumber;
const int Referee_TeamInfo::kTimeoutsFieldNumber;
const int Referee_TeamInfo::kTimeoutTimeFieldNumber;
const int Referee_TeamInfo::kGoalkeeperFieldNumber;
const int Referee_TeamInfo::kFoulCounterFieldNumber;
const int Referee_TeamInfo::kBallPlacementFailuresFieldNumber;
const int Referee_TeamInfo::kCanPlaceBallFieldNumber;
const int Referee_TeamInfo::kMaxAllowedBotsFieldNumber;
const int Referee_TeamInfo::kBotSubstitutionIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee_TeamInfo::Referee_TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5freferee_2eproto::scc_info_Referee_TeamInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Referee.TeamInfo)
}
Referee_TeamInfo::Referee_TeamInfo(const Referee_TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      yellow_card_times_(from.yellow_card_times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_substitution_intent_) -
    reinterpret_cast<char*>(&score_)) + sizeof(bot_substitution_intent_));
  // @@protoc_insertion_point(copy_constructor:Referee.TeamInfo)
}

void Referee_TeamInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_substitution_intent_) -
      reinterpret_cast<char*>(&score_)) + sizeof(bot_substitution_intent_));
}

Referee_TeamInfo::~Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:Referee.TeamInfo)
  SharedDtor();
}

void Referee_TeamInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Referee_TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Referee_TeamInfo::descriptor() {
  ::protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Referee_TeamInfo& Referee_TeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5freferee_2eproto::scc_info_Referee_TeamInfo.base);
  return *internal_default_instance();
}


void Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_card_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foul_counter_) -
        reinterpret_cast<char*>(&score_)) + sizeof(foul_counter_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&ball_placement_failures_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_substitution_intent_) -
        reinterpret_cast<char*>(&ball_placement_failures_)) + sizeof(bot_substitution_intent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Referee_TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Referee.TeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Referee.TeamInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 red_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_red_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 yellow_card_times = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_yellow_card_times())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_yellow_card_times())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 yellow_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_yellow_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timeouts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeouts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeouts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timeout_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_timeout_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 goalkeeper = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_goalkeeper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goalkeeper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 foul_counter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_foul_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foul_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ball_placement_failures = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ball_placement_failures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ball_placement_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_place_ball = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_can_place_ball();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_place_ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_allowed_bots = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_max_allowed_bots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_allowed_bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bot_substitution_intent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bot_substitution_intent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bot_substitution_intent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Referee.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Referee.TeamInfo)
  return false;
#undef DO_
}

void Referee_TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Referee.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Referee.TeamInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->red_cards(), output);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  if (this->yellow_card_times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _yellow_card_times_cached_byte_size_));
  }
  for (int i = 0, n = this->yellow_card_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->yellow_card_times(i), output);
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yellow_cards(), output);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeouts(), output);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timeout_time(), output);
  }

  // required uint32 goalkeeper = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->goalkeeper(), output);
  }

  // optional uint32 foul_counter = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->foul_counter(), output);
  }

  // optional uint32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ball_placement_failures(), output);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_place_ball(), output);
  }

  // optional uint32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_allowed_bots(), output);
  }

  // optional bool bot_substitution_intent = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->bot_substitution_intent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Referee.TeamInfo)
}

::google::protobuf::uint8* Referee_TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Referee.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Referee.TeamInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  if (this->yellow_card_times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _yellow_card_times_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->yellow_card_times_, target);
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout_time(), target);
  }

  // required uint32 goalkeeper = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->goalkeeper(), target);
  }

  // optional uint32 foul_counter = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->foul_counter(), target);
  }

  // optional uint32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ball_placement_failures(), target);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_place_ball(), target);
  }

  // optional uint32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_allowed_bots(), target);
  }

  // optional bool bot_substitution_intent = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->bot_substitution_intent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.TeamInfo)
  return target;
}

size_t Referee_TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.TeamInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_score()) {
    // required uint32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  if (has_red_cards()) {
    // required uint32 red_cards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_cards());
  }

  if (has_yellow_cards()) {
    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yellow_cards());
  }

  if (has_timeouts()) {
    // required uint32 timeouts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeouts());
  }

  if (has_timeout_time()) {
    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_time());
  }

  if (has_goalkeeper()) {
    // required uint32 goalkeeper = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goalkeeper());
  }

  return total_size;
}
size_t Referee_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

    // required uint32 red_cards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_cards());

    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yellow_cards());

    // required uint32 timeouts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeouts());

    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_time());

    // required uint32 goalkeeper = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goalkeeper());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->yellow_card_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _yellow_card_times_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional uint32 foul_counter = 9;
  if (has_foul_counter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->foul_counter());
  }

  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 ball_placement_failures = 10;
    if (has_ball_placement_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ball_placement_failures());
    }

    // optional uint32 max_allowed_bots = 13;
    if (has_max_allowed_bots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_allowed_bots());
    }

    // optional bool can_place_ball = 12;
    if (has_can_place_ball()) {
      total_size += 1 + 1;
    }

    // optional bool bot_substitution_intent = 14;
    if (has_bot_substitution_intent()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Referee_TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Referee_TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee_TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee.TeamInfo)
    MergeFrom(*source);
  }
}

void Referee_TeamInfo::MergeFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_card_times_.MergeFrom(from.yellow_card_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      red_cards_ = from.red_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      yellow_cards_ = from.yellow_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeouts_ = from.timeouts_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_time_ = from.timeout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      goalkeeper_ = from.goalkeeper_;
    }
    if (cached_has_bits & 0x00000080u) {
      foul_counter_ = from.foul_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ball_placement_failures_ = from.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_allowed_bots_ = from.max_allowed_bots_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_place_ball_ = from.can_place_ball_;
    }
    if (cached_has_bits & 0x00000800u) {
      bot_substitution_intent_ = from.bot_substitution_intent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Referee_TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee_TeamInfo::CopyFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void Referee_TeamInfo::Swap(Referee_TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee_TeamInfo::InternalSwap(Referee_TeamInfo* other) {
  using std::swap;
  yellow_card_times_.InternalSwap(&other->yellow_card_times_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
  swap(red_cards_, other->red_cards_);
  swap(yellow_cards_, other->yellow_cards_);
  swap(timeouts_, other->timeouts_);
  swap(timeout_time_, other->timeout_time_);
  swap(goalkeeper_, other->goalkeeper_);
  swap(foul_counter_, other->foul_counter_);
  swap(ball_placement_failures_, other->ball_placement_failures_);
  swap(max_allowed_bots_, other->max_allowed_bots_);
  swap(can_place_ball_, other->can_place_ball_);
  swap(bot_substitution_intent_, other->bot_substitution_intent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Referee_TeamInfo::GetMetadata() const {
  protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Referee_Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee_Point::kXFieldNumber;
const int Referee_Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee_Point::Referee_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5freferee_2eproto::scc_info_Referee_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Referee.Point)
}
Referee_Point::Referee_Point(const Referee_Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Referee.Point)
}

void Referee_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Referee_Point::~Referee_Point() {
  // @@protoc_insertion_point(destructor:Referee.Point)
  SharedDtor();
}

void Referee_Point::SharedDtor() {
}

void Referee_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Referee_Point::descriptor() {
  ::protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Referee_Point& Referee_Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5freferee_2eproto::scc_info_Referee_Point.base);
  return *internal_default_instance();
}


void Referee_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Referee_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Referee.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Referee.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Referee.Point)
  return false;
#undef DO_
}

void Referee_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Referee.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Referee.Point)
}

::google::protobuf::uint8* Referee_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Referee.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.Point)
  return target;
}

size_t Referee_Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Referee_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Referee_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Referee_Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee.Point)
    MergeFrom(*source);
  }
}

void Referee_Point::MergeFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Referee_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee_Point::CopyFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Referee_Point::Swap(Referee_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee_Point::InternalSwap(Referee_Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Referee_Point::GetMetadata() const {
  protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Referee::InitAsDefaultInstance() {
  ::_Referee_default_instance_._instance.get_mutable()->yellow_ = const_cast< ::Referee_TeamInfo*>(
      ::Referee_TeamInfo::internal_default_instance());
  ::_Referee_default_instance_._instance.get_mutable()->blue_ = const_cast< ::Referee_TeamInfo*>(
      ::Referee_TeamInfo::internal_default_instance());
  ::_Referee_default_instance_._instance.get_mutable()->designated_position_ = const_cast< ::Referee_Point*>(
      ::Referee_Point::internal_default_instance());
  ::_Referee_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::Game_Event*>(
      ::Game_Event::internal_default_instance());
}
void Referee::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
void Referee::clear_game_events() {
  game_events_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee::kPacketTimestampFieldNumber;
const int Referee::kStageFieldNumber;
const int Referee::kStageTimeLeftFieldNumber;
const int Referee::kCommandFieldNumber;
const int Referee::kCommandCounterFieldNumber;
const int Referee::kCommandTimestampFieldNumber;
const int Referee::kYellowFieldNumber;
const int Referee::kBlueFieldNumber;
const int Referee::kDesignatedPositionFieldNumber;
const int Referee::kBlueTeamOnPositiveHalfFieldNumber;
const int Referee::kGameEventFieldNumber;
const int Referee::kNextCommandFieldNumber;
const int Referee::kGameEventsFieldNumber;
const int Referee::kProposedGameEventsFieldNumber;
const int Referee::kCurrentActionTimeRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee::Referee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5freferee_2eproto::scc_info_Referee.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Referee)
}
Referee::Referee(const Referee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      game_events_(from.game_events_),
      proposed_game_events_(from.proposed_game_events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_yellow()) {
    yellow_ = new ::Referee_TeamInfo(*from.yellow_);
  } else {
    yellow_ = NULL;
  }
  if (from.has_blue()) {
    blue_ = new ::Referee_TeamInfo(*from.blue_);
  } else {
    blue_ = NULL;
  }
  if (from.has_designated_position()) {
    designated_position_ = new ::Referee_Point(*from.designated_position_);
  } else {
    designated_position_ = NULL;
  }
  if (from.has_game_event()) {
    game_event_ = new ::Game_Event(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  ::memcpy(&packet_timestamp_, &from.packet_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_action_time_remaining_) -
    reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(current_action_time_remaining_));
  // @@protoc_insertion_point(copy_constructor:Referee)
}

void Referee::SharedCtor() {
  ::memset(&yellow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_action_time_remaining_) -
      reinterpret_cast<char*>(&yellow_)) + sizeof(current_action_time_remaining_));
}

Referee::~Referee() {
  // @@protoc_insertion_point(destructor:Referee)
  SharedDtor();
}

void Referee::SharedDtor() {
  if (this != internal_default_instance()) delete yellow_;
  if (this != internal_default_instance()) delete blue_;
  if (this != internal_default_instance()) delete designated_position_;
  if (this != internal_default_instance()) delete game_event_;
}

void Referee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Referee::descriptor() {
  ::protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Referee& Referee::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5freferee_2eproto::scc_info_Referee.base);
  return *internal_default_instance();
}


void Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_events_.Clear();
  proposed_game_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(yellow_ != NULL);
      yellow_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(blue_ != NULL);
      blue_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(designated_position_ != NULL);
      designated_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(game_event_ != NULL);
      game_event_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&packet_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_) -
        reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(command_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&command_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_action_time_remaining_) -
        reinterpret_cast<char*>(&command_counter_)) + sizeof(current_action_time_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Referee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Referee)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 packet_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_packet_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packet_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Referee.Stage stage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Stage_IsValid(value)) {
            set_stage(static_cast< ::Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 stage_time_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stage_time_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stage_time_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Referee.Command command = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Command_IsValid(value)) {
            set_command(static_cast< ::Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 command_counter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_command_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 command_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_command_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &command_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Referee.TeamInfo yellow = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Referee.TeamInfo blue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Referee.Point designated_position = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_designated_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blue_team_on_positive_half = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_blue_team_on_positive_half();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blue_team_on_positive_half_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Game_Event game_event = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Referee.Command next_command = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Command_IsValid(value)) {
            set_next_command(static_cast< ::Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameEvent game_events = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProposedGameEvent proposed_game_events = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_proposed_game_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_action_time_remaining = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_current_action_time_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_action_time_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Referee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Referee)
  return false;
#undef DO_
}

void Referee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Referee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->packet_timestamp(), output);
  }

  // required .Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->stage_time_left(), output);
  }

  // required .Referee.Command command = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->command(), output);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->command_counter(), output);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->command_timestamp(), output);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_yellow(), output);
  }

  // required .Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_blue(), output);
  }

  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_designated_position(), output);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->blue_team_on_positive_half(), output);
  }

  // optional .Game_Event game_event = 11 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_game_event(), output);
  }

  // optional .Referee.Command next_command = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->next_command(), output);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->game_events(static_cast<int>(i)),
      output);
  }

  // repeated .ProposedGameEvent proposed_game_events = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proposed_game_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->proposed_game_events(static_cast<int>(i)),
      output);
  }

  // optional int32 current_action_time_remaining = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->current_action_time_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Referee)
}

::google::protobuf::uint8* Referee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Referee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->packet_timestamp(), target);
  }

  // required .Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->stage_time_left(), target);
  }

  // required .Referee.Command command = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->command(), target);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->command_timestamp(), target);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_yellow(), deterministic, target);
  }

  // required .Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_blue(), deterministic, target);
  }

  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_designated_position(), deterministic, target);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->blue_team_on_positive_half(), target);
  }

  // optional .Game_Event game_event = 11 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_game_event(), deterministic, target);
  }

  // optional .Referee.Command next_command = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->next_command(), target);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->game_events(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ProposedGameEvent proposed_game_events = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proposed_game_events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->proposed_game_events(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 current_action_time_remaining = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->current_action_time_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee)
  return target;
}

size_t Referee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee)
  size_t total_size = 0;

  if (has_yellow()) {
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yellow_);
  }

  if (has_blue()) {
    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  if (has_packet_timestamp()) {
    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packet_timestamp());
  }

  if (has_stage()) {
    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  if (has_command()) {
    // required .Referee.Command command = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  if (has_command_counter()) {
    // required uint32 command_counter = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_counter());
  }

  if (has_command_timestamp()) {
    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->command_timestamp());
  }

  return total_size;
}
size_t Referee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003b3) ^ 0x000003b3) == 0) {  // All required fields are present.
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yellow_);

    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_);

    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packet_timestamp());

    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());

    // required .Referee.Command command = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());

    // required uint32 command_counter = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_counter());

    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->command_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .GameEvent game_events = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->game_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_events(static_cast<int>(i)));
    }
  }

  // repeated .ProposedGameEvent proposed_game_events = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->proposed_game_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->proposed_game_events(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .Referee.Point designated_position = 9;
    if (has_designated_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *designated_position_);
    }

    // optional .Game_Event game_event = 11 [deprecated = true];
    if (has_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_event_);
    }

  }
  // optional sint32 stage_time_left = 3;
  if (has_stage_time_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->stage_time_left());
  }

  if (_has_bits_[8 / 32] & 7168u) {
    // optional bool blue_team_on_positive_half = 10;
    if (has_blue_team_on_positive_half()) {
      total_size += 1 + 1;
    }

    // optional .Referee.Command next_command = 12;
    if (has_next_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->next_command());
    }

    // optional int32 current_action_time_remaining = 15;
    if (has_current_action_time_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_action_time_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Referee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee)
  GOOGLE_DCHECK_NE(&from, this);
  const Referee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee)
    MergeFrom(*source);
  }
}

void Referee::MergeFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_events_.MergeFrom(from.game_events_);
  proposed_game_events_.MergeFrom(from.proposed_game_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_yellow()->::Referee_TeamInfo::MergeFrom(from.yellow());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_blue()->::Referee_TeamInfo::MergeFrom(from.blue());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_designated_position()->::Referee_Point::MergeFrom(from.designated_position());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_game_event()->::Game_Event::MergeFrom(from.game_event());
    }
    if (cached_has_bits & 0x00000010u) {
      packet_timestamp_ = from.packet_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000040u) {
      stage_time_left_ = from.stage_time_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      command_ = from.command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      command_counter_ = from.command_counter_;
    }
    if (cached_has_bits & 0x00000200u) {
      command_timestamp_ = from.command_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      blue_team_on_positive_half_ = from.blue_team_on_positive_half_;
    }
    if (cached_has_bits & 0x00000800u) {
      next_command_ = from.next_command_;
    }
    if (cached_has_bits & 0x00001000u) {
      current_action_time_remaining_ = from.current_action_time_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Referee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee::CopyFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003b3) != 0x000003b3) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->game_events())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proposed_game_events())) return false;
  if (has_yellow()) {
    if (!this->yellow_->IsInitialized()) return false;
  }
  if (has_blue()) {
    if (!this->blue_->IsInitialized()) return false;
  }
  if (has_designated_position()) {
    if (!this->designated_position_->IsInitialized()) return false;
  }
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void Referee::Swap(Referee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee::InternalSwap(Referee* other) {
  using std::swap;
  CastToBase(&game_events_)->InternalSwap(CastToBase(&other->game_events_));
  CastToBase(&proposed_game_events_)->InternalSwap(CastToBase(&other->proposed_game_events_));
  swap(yellow_, other->yellow_);
  swap(blue_, other->blue_);
  swap(designated_position_, other->designated_position_);
  swap(game_event_, other->game_event_);
  swap(packet_timestamp_, other->packet_timestamp_);
  swap(stage_, other->stage_);
  swap(stage_time_left_, other->stage_time_left_);
  swap(command_, other->command_);
  swap(command_counter_, other->command_counter_);
  swap(command_timestamp_, other->command_timestamp_);
  swap(blue_team_on_positive_half_, other->blue_team_on_positive_half_);
  swap(next_command_, other->next_command_);
  swap(current_action_time_remaining_, other->current_action_time_remaining_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Referee::GetMetadata() const {
  protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProposedGameEvent::InitAsDefaultInstance() {
  ::_ProposedGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void ProposedGameEvent::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposedGameEvent::kValidUntilFieldNumber;
const int ProposedGameEvent::kProposerIdFieldNumber;
const int ProposedGameEvent::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposedGameEvent::ProposedGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5freferee_2eproto::scc_info_ProposedGameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProposedGameEvent)
}
ProposedGameEvent::ProposedGameEvent(const ProposedGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proposer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proposer_id()) {
    proposer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_id_);
  }
  if (from.has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  valid_until_ = from.valid_until_;
  // @@protoc_insertion_point(copy_constructor:ProposedGameEvent)
}

void ProposedGameEvent::SharedCtor() {
  proposer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_until_) -
      reinterpret_cast<char*>(&game_event_)) + sizeof(valid_until_));
}

ProposedGameEvent::~ProposedGameEvent() {
  // @@protoc_insertion_point(destructor:ProposedGameEvent)
  SharedDtor();
}

void ProposedGameEvent::SharedDtor() {
  proposer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_event_;
}

void ProposedGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProposedGameEvent::descriptor() {
  ::protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProposedGameEvent& ProposedGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5freferee_2eproto::scc_info_ProposedGameEvent.base);
  return *internal_default_instance();
}


void ProposedGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ProposedGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      proposer_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_event_ != NULL);
      game_event_->Clear();
    }
  }
  valid_until_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProposedGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProposedGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 valid_until = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_valid_until();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &valid_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string proposer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proposer_id().data(), static_cast<int>(this->proposer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProposedGameEvent.proposer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GameEvent game_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProposedGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProposedGameEvent)
  return false;
#undef DO_
}

void ProposedGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProposedGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 valid_until = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->valid_until(), output);
  }

  // required string proposer_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposer_id().data(), static_cast<int>(this->proposer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProposedGameEvent.proposer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proposer_id(), output);
  }

  // required .GameEvent game_event = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProposedGameEvent)
}

::google::protobuf::uint8* ProposedGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProposedGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 valid_until = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->valid_until(), target);
  }

  // required string proposer_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposer_id().data(), static_cast<int>(this->proposer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProposedGameEvent.proposer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proposer_id(), target);
  }

  // required .GameEvent game_event = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProposedGameEvent)
  return target;
}

size_t ProposedGameEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProposedGameEvent)
  size_t total_size = 0;

  if (has_proposer_id()) {
    // required string proposer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposer_id());
  }

  if (has_game_event()) {
    // required .GameEvent game_event = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  if (has_valid_until()) {
    // required uint64 valid_until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->valid_until());
  }

  return total_size;
}
size_t ProposedGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProposedGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string proposer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposer_id());

    // required .GameEvent game_event = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_event_);

    // required uint64 valid_until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->valid_until());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposedGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProposedGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposedGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProposedGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProposedGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProposedGameEvent)
    MergeFrom(*source);
  }
}

void ProposedGameEvent::MergeFrom(const ProposedGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProposedGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proposer_id();
      proposer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_game_event()->::GameEvent::MergeFrom(from.game_event());
    }
    if (cached_has_bits & 0x00000004u) {
      valid_until_ = from.valid_until_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProposedGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProposedGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposedGameEvent::CopyFrom(const ProposedGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProposedGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposedGameEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void ProposedGameEvent::Swap(ProposedGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposedGameEvent::InternalSwap(ProposedGameEvent* other) {
  using std::swap;
  proposer_id_.Swap(&other->proposer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_event_, other->game_event_);
  swap(valid_until_, other->valid_until_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProposedGameEvent::GetMetadata() const {
  protobuf_ssl_5freferee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5freferee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Referee_TeamInfo* Arena::CreateMaybeMessage< ::Referee_TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Referee_TeamInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Referee_Point* Arena::CreateMaybeMessage< ::Referee_Point >(Arena* arena) {
  return Arena::CreateInternal< ::Referee_Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Referee* Arena::CreateMaybeMessage< ::Referee >(Arena* arena) {
  return Arena::CreateInternal< ::Referee >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProposedGameEvent* Arena::CreateMaybeMessage< ::ProposedGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::ProposedGameEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
