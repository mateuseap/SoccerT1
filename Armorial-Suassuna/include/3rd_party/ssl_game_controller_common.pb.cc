// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_common.proto

#include "ssl_game_controller_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class BotIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BotId>
      _instance;
} _BotId_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Location>
      _instance;
} _Location_default_instance_;
class ControllerReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerReply>
      _instance;
} _ControllerReply_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signature>
      _instance;
} _Signature_default_instance_;
class BallSpeedMeasurementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BallSpeedMeasurement>
      _instance;
} _BallSpeedMeasurement_default_instance_;
namespace protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto {
static void InitDefaultsBotId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BotId_default_instance_;
    new (ptr) ::BotId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BotId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BotId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBotId}, {}};

static void InitDefaultsLocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Location_default_instance_;
    new (ptr) ::Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Location =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocation}, {}};

static void InitDefaultsControllerReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerReply_default_instance_;
    new (ptr) ::ControllerReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerReply}, {}};

static void InitDefaultsSignature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Signature_default_instance_;
    new (ptr) ::Signature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Signature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignature}, {}};

static void InitDefaultsBallSpeedMeasurement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BallSpeedMeasurement_default_instance_;
    new (ptr) ::BallSpeedMeasurement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BallSpeedMeasurement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BallSpeedMeasurement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBallSpeedMeasurement}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BotId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Location.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BallSpeedMeasurement.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BotId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BotId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BotId, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BotId, team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Location, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Location, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Location, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerReply, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerReply, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerReply, next_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerReply, verification_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Signature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Signature, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Signature, pkcs1v15_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BallSpeedMeasurement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BallSpeedMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BallSpeedMeasurement, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BallSpeedMeasurement, ball_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BallSpeedMeasurement, initial_ball_speed_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::BotId)},
  { 9, 16, sizeof(::Location)},
  { 18, 27, sizeof(::ControllerReply)},
  { 31, 38, sizeof(::Signature)},
  { 40, 48, sizeof(::BallSpeedMeasurement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BotId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Signature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BallSpeedMeasurement_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_game_controller_common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n ssl_game_controller_common.proto\"(\n\005Bo"
      "tId\022\n\n\002id\030\001 \001(\005\022\023\n\004team\030\002 \001(\0162\005.Team\" \n\010"
      "Location\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\241\002\n\017Contr"
      "ollerReply\0220\n\013status_code\030\001 \001(\0162\033.Contro"
      "llerReply.StatusCode\022\016\n\006reason\030\002 \001(\t\022\022\n\n"
      "next_token\030\003 \001(\t\0223\n\014verification\030\004 \001(\0162\035"
      ".ControllerReply.Verification\";\n\nStatusC"
      "ode\022\027\n\023UNKNOWN_STATUS_CODE\020\000\022\006\n\002OK\020\001\022\014\n\010"
      "REJECTED\020\002\"F\n\014Verification\022\030\n\024UNKNOWN_VE"
      "RIFICATION\020\000\022\014\n\010VERIFIED\020\001\022\016\n\nUNVERIFIED"
      "\020\002\",\n\tSignature\022\r\n\005token\030\001 \002(\t\022\020\n\010pkcs1v"
      "15\030\002 \002(\014\"Y\n\024BallSpeedMeasurement\022\021\n\ttime"
      "stamp\030\001 \002(\004\022\022\n\nball_speed\030\002 \002(\002\022\032\n\022initi"
      "al_ball_speed\030\003 \001(\002*)\n\004Team\022\013\n\007UNKNOWN\020\000"
      "\022\n\n\006YELLOW\020\001\022\010\n\004BLUE\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_game_controller_common.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto
const ::google::protobuf::EnumDescriptor* ControllerReply_StatusCode_descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_enum_descriptors[0];
}
bool ControllerReply_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerReply_StatusCode ControllerReply::UNKNOWN_STATUS_CODE;
const ControllerReply_StatusCode ControllerReply::OK;
const ControllerReply_StatusCode ControllerReply::REJECTED;
const ControllerReply_StatusCode ControllerReply::StatusCode_MIN;
const ControllerReply_StatusCode ControllerReply::StatusCode_MAX;
const int ControllerReply::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ControllerReply_Verification_descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_enum_descriptors[1];
}
bool ControllerReply_Verification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerReply_Verification ControllerReply::UNKNOWN_VERIFICATION;
const ControllerReply_Verification ControllerReply::VERIFIED;
const ControllerReply_Verification ControllerReply::UNVERIFIED;
const ControllerReply_Verification ControllerReply::Verification_MIN;
const ControllerReply_Verification ControllerReply::Verification_MAX;
const int ControllerReply::Verification_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Team_descriptor() {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_enum_descriptors[2];
}
bool Team_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BotId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BotId::kIdFieldNumber;
const int BotId::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BotId::BotId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_BotId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotId)
}
BotId::BotId(const BotId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&id_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:BotId)
}

void BotId::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&id_)) + sizeof(team_));
}

BotId::~BotId() {
  // @@protoc_insertion_point(destructor:BotId)
  SharedDtor();
}

void BotId::SharedDtor() {
}

void BotId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BotId::descriptor() {
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BotId& BotId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_BotId.base);
  return *internal_default_instance();
}


void BotId::Clear() {
// @@protoc_insertion_point(message_clear_start:BotId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&id_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BotId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotId)
  return false;
#undef DO_
}

void BotId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .Team team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotId)
}

::google::protobuf::uint8* BotId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BotId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .Team team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotId)
  return target;
}

size_t BotId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BotId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .Team team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BotId)
  GOOGLE_DCHECK_NE(&from, this);
  const BotId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BotId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BotId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BotId)
    MergeFrom(*source);
  }
}

void BotId::MergeFrom(const BotId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BotId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BotId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotId::CopyFrom(const BotId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotId::IsInitialized() const {
  return true;
}

void BotId::Swap(BotId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BotId::InternalSwap(BotId* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BotId::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Location::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kXFieldNumber;
const int Location::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Location)
}

void Location::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:Location)
  SharedDtor();
}

void Location::SharedDtor() {
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Location)
  return target;
}

size_t Location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Location)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerReply::kStatusCodeFieldNumber;
const int ControllerReply::kReasonFieldNumber;
const int ControllerReply::kNextTokenFieldNumber;
const int ControllerReply::kVerificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerReply::ControllerReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_ControllerReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerReply)
}
ControllerReply::ControllerReply(const ControllerReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next_token()) {
    next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
  }
  ::memcpy(&status_code_, &from.status_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&verification_) -
    reinterpret_cast<char*>(&status_code_)) + sizeof(verification_));
  // @@protoc_insertion_point(copy_constructor:ControllerReply)
}

void ControllerReply::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verification_) -
      reinterpret_cast<char*>(&status_code_)) + sizeof(verification_));
}

ControllerReply::~ControllerReply() {
  // @@protoc_insertion_point(destructor:ControllerReply)
  SharedDtor();
}

void ControllerReply::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControllerReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerReply::descriptor() {
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerReply& ControllerReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_ControllerReply.base);
  return *internal_default_instance();
}


void ControllerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      next_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&status_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verification_) -
        reinterpret_cast<char*>(&status_code_)) + sizeof(verification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControllerReply.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerReply_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::ControllerReply_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ControllerReply.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string next_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next_token().data(), static_cast<int>(this->next_token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ControllerReply.next_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ControllerReply.Verification verification = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerReply_Verification_IsValid(value)) {
            set_verification(static_cast< ::ControllerReply_Verification >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerReply)
  return false;
#undef DO_
}

void ControllerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControllerReply.StatusCode status_code = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional string next_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_token().data(), static_cast<int>(this->next_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.next_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_token(), output);
  }

  // optional .ControllerReply.Verification verification = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->verification(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerReply)
}

::google::protobuf::uint8* ControllerReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControllerReply.StatusCode status_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional string next_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_token().data(), static_cast<int>(this->next_token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.next_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_token(), target);
  }

  // optional .ControllerReply.Verification verification = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->verification(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerReply)
  return target;
}

size_t ControllerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string next_token = 3;
    if (has_next_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_token());
    }

    // optional .ControllerReply.StatusCode status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
    }

    // optional .ControllerReply.Verification verification = 4;
    if (has_verification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->verification());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerReply)
    MergeFrom(*source);
  }
}

void ControllerReply::MergeFrom(const ControllerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_next_token();
      next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      status_code_ = from.status_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      verification_ = from.verification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerReply::CopyFrom(const ControllerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerReply::IsInitialized() const {
  return true;
}

void ControllerReply::Swap(ControllerReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerReply::InternalSwap(ControllerReply* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_token_.Swap(&other->next_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_code_, other->status_code_);
  swap(verification_, other->verification_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerReply::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kTokenFieldNumber;
const int Signature::kPkcs1V15FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Signature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Signature)
}
Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  pkcs1v15_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pkcs1v15()) {
    pkcs1v15_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkcs1v15_);
  }
  // @@protoc_insertion_point(copy_constructor:Signature)
}

void Signature::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkcs1v15_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkcs1v15_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signature& Signature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Signature.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pkcs1v15_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Signature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Signature.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pkcs1v15 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pkcs1v15()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Signature.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required bytes pkcs1v15 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pkcs1v15(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Signature.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required bytes pkcs1v15 = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pkcs1v15(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Signature)
  return target;
}

size_t Signature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Signature)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_pkcs1v15()) {
    // required bytes pkcs1v15 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pkcs1v15());
  }

  return total_size;
}
size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Signature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required bytes pkcs1v15 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pkcs1v15());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pkcs1v15();
      pkcs1v15_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkcs1v15_);
    }
  }
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pkcs1v15_.Swap(&other->pkcs1v15_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BallSpeedMeasurement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallSpeedMeasurement::kTimestampFieldNumber;
const int BallSpeedMeasurement::kBallSpeedFieldNumber;
const int BallSpeedMeasurement::kInitialBallSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallSpeedMeasurement::BallSpeedMeasurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_BallSpeedMeasurement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BallSpeedMeasurement)
}
BallSpeedMeasurement::BallSpeedMeasurement(const BallSpeedMeasurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_ball_speed_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(initial_ball_speed_));
  // @@protoc_insertion_point(copy_constructor:BallSpeedMeasurement)
}

void BallSpeedMeasurement::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_ball_speed_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(initial_ball_speed_));
}

BallSpeedMeasurement::~BallSpeedMeasurement() {
  // @@protoc_insertion_point(destructor:BallSpeedMeasurement)
  SharedDtor();
}

void BallSpeedMeasurement::SharedDtor() {
}

void BallSpeedMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BallSpeedMeasurement::descriptor() {
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallSpeedMeasurement& BallSpeedMeasurement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_BallSpeedMeasurement.base);
  return *internal_default_instance();
}


void BallSpeedMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:BallSpeedMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initial_ball_speed_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(initial_ball_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallSpeedMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BallSpeedMeasurement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ball_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_ball_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ball_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float initial_ball_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_initial_ball_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_ball_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BallSpeedMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BallSpeedMeasurement)
  return false;
#undef DO_
}

void BallSpeedMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BallSpeedMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required float ball_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ball_speed(), output);
  }

  // optional float initial_ball_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->initial_ball_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BallSpeedMeasurement)
}

::google::protobuf::uint8* BallSpeedMeasurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BallSpeedMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required float ball_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ball_speed(), target);
  }

  // optional float initial_ball_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->initial_ball_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BallSpeedMeasurement)
  return target;
}

size_t BallSpeedMeasurement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BallSpeedMeasurement)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_ball_speed()) {
    // required float ball_speed = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t BallSpeedMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BallSpeedMeasurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required float ball_speed = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float initial_ball_speed = 3;
  if (has_initial_ball_speed()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallSpeedMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BallSpeedMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const BallSpeedMeasurement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallSpeedMeasurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BallSpeedMeasurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BallSpeedMeasurement)
    MergeFrom(*source);
  }
}

void BallSpeedMeasurement::MergeFrom(const BallSpeedMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BallSpeedMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      ball_speed_ = from.ball_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_ball_speed_ = from.initial_ball_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallSpeedMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BallSpeedMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallSpeedMeasurement::CopyFrom(const BallSpeedMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BallSpeedMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallSpeedMeasurement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BallSpeedMeasurement::Swap(BallSpeedMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallSpeedMeasurement::InternalSwap(BallSpeedMeasurement* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(ball_speed_, other->ball_speed_);
  swap(initial_ball_speed_, other->initial_ball_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BallSpeedMeasurement::GetMetadata() const {
  protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BotId* Arena::CreateMaybeMessage< ::BotId >(Arena* arena) {
  return Arena::CreateInternal< ::BotId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Location* Arena::CreateMaybeMessage< ::Location >(Arena* arena) {
  return Arena::CreateInternal< ::Location >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerReply* Arena::CreateMaybeMessage< ::ControllerReply >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Signature* Arena::CreateMaybeMessage< ::Signature >(Arena* arena) {
  return Arena::CreateInternal< ::Signature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BallSpeedMeasurement* Arena::CreateMaybeMessage< ::BallSpeedMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::BallSpeedMeasurement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
