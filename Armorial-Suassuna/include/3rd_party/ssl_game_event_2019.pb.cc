// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_event_2019.proto

#include "ssl_game_event_2019.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Location;
}  // namespace protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto
namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_BotSubstitution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_MultipleCards;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_MultipleFouls;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_MultiplePlacementFailures;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_PlacementFailed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_PlacementSucceeded;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_Prepared;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_TooManyRobots;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMajor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMinor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AimlessKick;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerDoubleTouchedBall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerTooCloseToDefenseArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedBallInDefenseArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BallLeftField;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotCrashDrawn;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotCrashUnique;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotDribbledBallTooFar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotHeldBallDeliberately;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotInterferedPlacement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotKickedBallTooFast;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotPushedBot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotTippedOver;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotTooFastInStop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_ChippedGoal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseAreaPartially;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_DefenderTooCloseToKickPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_Goal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_IndirectGoal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_KeeperHeldBall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_KickTimeout;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgame_5fevent_5f2019_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_NoProgressInGame;
}  // namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto
class GameEvent_BallLeftFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BallLeftField>
      _instance;
} _GameEvent_BallLeftField_default_instance_;
class GameEvent_AimlessKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AimlessKick>
      _instance;
} _GameEvent_AimlessKick_default_instance_;
class GameEvent_GoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_Goal>
      _instance;
} _GameEvent_Goal_default_instance_;
class GameEvent_IndirectGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_IndirectGoal>
      _instance;
} _GameEvent_IndirectGoal_default_instance_;
class GameEvent_ChippedGoalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_ChippedGoal>
      _instance;
} _GameEvent_ChippedGoal_default_instance_;
class GameEvent_BotTooFastInStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotTooFastInStop>
      _instance;
} _GameEvent_BotTooFastInStop_default_instance_;
class GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_DefenderTooCloseToKickPoint>
      _instance;
} _GameEvent_DefenderTooCloseToKickPoint_default_instance_;
class GameEvent_BotCrashDrawnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotCrashDrawn>
      _instance;
} _GameEvent_BotCrashDrawn_default_instance_;
class GameEvent_BotCrashUniqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotCrashUnique>
      _instance;
} _GameEvent_BotCrashUnique_default_instance_;
class GameEvent_BotPushedBotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotPushedBot>
      _instance;
} _GameEvent_BotPushedBot_default_instance_;
class GameEvent_BotTippedOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotTippedOver>
      _instance;
} _GameEvent_BotTippedOver_default_instance_;
class GameEvent_DefenderInDefenseAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_DefenderInDefenseArea>
      _instance;
} _GameEvent_DefenderInDefenseArea_default_instance_;
class GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_DefenderInDefenseAreaPartially>
      _instance;
} _GameEvent_DefenderInDefenseAreaPartially_default_instance_;
class GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerTouchedBallInDefenseArea>
      _instance;
} _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
class GameEvent_BotKickedBallTooFastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotKickedBallTooFast>
      _instance;
} _GameEvent_BotKickedBallTooFast_default_instance_;
class GameEvent_BotDribbledBallTooFarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotDribbledBallTooFar>
      _instance;
} _GameEvent_BotDribbledBallTooFar_default_instance_;
class GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerTouchedOpponentInDefenseArea>
      _instance;
} _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
class GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerDoubleTouchedBall>
      _instance;
} _GameEvent_AttackerDoubleTouchedBall_default_instance_;
class GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_AttackerTooCloseToDefenseArea>
      _instance;
} _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
class GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotHeldBallDeliberately>
      _instance;
} _GameEvent_BotHeldBallDeliberately_default_instance_;
class GameEvent_BotInterferedPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotInterferedPlacement>
      _instance;
} _GameEvent_BotInterferedPlacement_default_instance_;
class GameEvent_MultipleCardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_MultipleCards>
      _instance;
} _GameEvent_MultipleCards_default_instance_;
class GameEvent_MultipleFoulsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_MultipleFouls>
      _instance;
} _GameEvent_MultipleFouls_default_instance_;
class GameEvent_MultiplePlacementFailuresDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_MultiplePlacementFailures>
      _instance;
} _GameEvent_MultiplePlacementFailures_default_instance_;
class GameEvent_KickTimeoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_KickTimeout>
      _instance;
} _GameEvent_KickTimeout_default_instance_;
class GameEvent_NoProgressInGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_NoProgressInGame>
      _instance;
} _GameEvent_NoProgressInGame_default_instance_;
class GameEvent_PlacementFailedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_PlacementFailed>
      _instance;
} _GameEvent_PlacementFailed_default_instance_;
class GameEvent_UnsportingBehaviorMinorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_UnsportingBehaviorMinor>
      _instance;
} _GameEvent_UnsportingBehaviorMinor_default_instance_;
class GameEvent_UnsportingBehaviorMajorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_UnsportingBehaviorMajor>
      _instance;
} _GameEvent_UnsportingBehaviorMajor_default_instance_;
class GameEvent_KeeperHeldBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_KeeperHeldBall>
      _instance;
} _GameEvent_KeeperHeldBall_default_instance_;
class GameEvent_PlacementSucceededDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_PlacementSucceeded>
      _instance;
} _GameEvent_PlacementSucceeded_default_instance_;
class GameEvent_PreparedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_Prepared>
      _instance;
} _GameEvent_Prepared_default_instance_;
class GameEvent_BotSubstitutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_BotSubstitution>
      _instance;
} _GameEvent_BotSubstitution_default_instance_;
class GameEvent_TooManyRobotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent_TooManyRobots>
      _instance;
} _GameEvent_TooManyRobots_default_instance_;
class GameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameEvent>
      _instance;
  const ::GameEvent_Prepared* prepared_;
  const ::GameEvent_NoProgressInGame* no_progress_in_game_;
  const ::GameEvent_PlacementFailed* placement_failed_;
  const ::GameEvent_PlacementSucceeded* placement_succeeded_;
  const ::GameEvent_BotSubstitution* bot_substitution_;
  const ::GameEvent_TooManyRobots* too_many_robots_;
  const ::GameEvent_BallLeftField* ball_left_field_touch_line_;
  const ::GameEvent_BallLeftField* ball_left_field_goal_line_;
  const ::GameEvent_Goal* possible_goal_;
  const ::GameEvent_Goal* goal_;
  const ::GameEvent_IndirectGoal* indirect_goal_;
  const ::GameEvent_ChippedGoal* chipped_goal_;
  const ::GameEvent_AimlessKick* aimless_kick_;
  const ::GameEvent_KickTimeout* kick_timeout_;
  const ::GameEvent_KeeperHeldBall* keeper_held_ball_;
  const ::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball_;
  const ::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area_;
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped_;
  const ::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far_;
  const ::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast_;
  const ::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area_;
  const ::GameEvent_BotInterferedPlacement* bot_interfered_placement_;
  const ::GameEvent_BotCrashDrawn* bot_crash_drawn_;
  const ::GameEvent_BotCrashUnique* bot_crash_unique_;
  const ::GameEvent_BotCrashUnique* bot_crash_unique_skipped_;
  const ::GameEvent_BotPushedBot* bot_pushed_bot_;
  const ::GameEvent_BotPushedBot* bot_pushed_bot_skipped_;
  const ::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately_;
  const ::GameEvent_BotTippedOver* bot_tipped_over_;
  const ::GameEvent_BotTooFastInStop* bot_too_fast_in_stop_;
  const ::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point_;
  const ::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially_;
  const ::GameEvent_DefenderInDefenseArea* defender_in_defense_area_;
  const ::GameEvent_MultipleCards* multiple_cards_;
  const ::GameEvent_MultiplePlacementFailures* multiple_placement_failures_;
  const ::GameEvent_MultipleFouls* multiple_fouls_;
  const ::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor_;
  const ::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major_;
} _GameEvent_default_instance_;
namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto {
static void InitDefaultsGameEvent_BallLeftField() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BallLeftField_default_instance_;
    new (ptr) ::GameEvent_BallLeftField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BallLeftField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BallLeftField =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BallLeftField}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_AimlessKick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AimlessKick_default_instance_;
    new (ptr) ::GameEvent_AimlessKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AimlessKick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AimlessKick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_AimlessKick}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_Goal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_Goal_default_instance_;
    new (ptr) ::GameEvent_Goal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_Goal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_Goal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_Goal}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_IndirectGoal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_IndirectGoal_default_instance_;
    new (ptr) ::GameEvent_IndirectGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_IndirectGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_IndirectGoal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_IndirectGoal}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_ChippedGoal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_ChippedGoal_default_instance_;
    new (ptr) ::GameEvent_ChippedGoal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_ChippedGoal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_ChippedGoal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_ChippedGoal}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotTooFastInStop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotTooFastInStop_default_instance_;
    new (ptr) ::GameEvent_BotTooFastInStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotTooFastInStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotTooFastInStop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotTooFastInStop}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_DefenderTooCloseToKickPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_DefenderTooCloseToKickPoint_default_instance_;
    new (ptr) ::GameEvent_DefenderTooCloseToKickPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_DefenderTooCloseToKickPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_DefenderTooCloseToKickPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_DefenderTooCloseToKickPoint}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotCrashDrawn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotCrashDrawn_default_instance_;
    new (ptr) ::GameEvent_BotCrashDrawn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotCrashDrawn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotCrashDrawn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotCrashDrawn}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotCrashUnique() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotCrashUnique_default_instance_;
    new (ptr) ::GameEvent_BotCrashUnique();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotCrashUnique::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotCrashUnique =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotCrashUnique}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotPushedBot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotPushedBot_default_instance_;
    new (ptr) ::GameEvent_BotPushedBot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotPushedBot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotPushedBot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotPushedBot}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotTippedOver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotTippedOver_default_instance_;
    new (ptr) ::GameEvent_BotTippedOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotTippedOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotTippedOver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotTippedOver}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_DefenderInDefenseArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_DefenderInDefenseArea_default_instance_;
    new (ptr) ::GameEvent_DefenderInDefenseArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_DefenderInDefenseArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_DefenderInDefenseArea}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_DefenderInDefenseAreaPartially() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_DefenderInDefenseAreaPartially_default_instance_;
    new (ptr) ::GameEvent_DefenderInDefenseAreaPartially();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_DefenderInDefenseAreaPartially::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseAreaPartially =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_DefenderInDefenseAreaPartially}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_AttackerTouchedBallInDefenseArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
    new (ptr) ::GameEvent_AttackerTouchedBallInDefenseArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerTouchedBallInDefenseArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedBallInDefenseArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_AttackerTouchedBallInDefenseArea}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotKickedBallTooFast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotKickedBallTooFast_default_instance_;
    new (ptr) ::GameEvent_BotKickedBallTooFast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotKickedBallTooFast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotKickedBallTooFast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotKickedBallTooFast}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotDribbledBallTooFar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotDribbledBallTooFar_default_instance_;
    new (ptr) ::GameEvent_BotDribbledBallTooFar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotDribbledBallTooFar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotDribbledBallTooFar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotDribbledBallTooFar}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_AttackerTouchedOpponentInDefenseArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
    new (ptr) ::GameEvent_AttackerTouchedOpponentInDefenseArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerTouchedOpponentInDefenseArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_AttackerTouchedOpponentInDefenseArea}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_AttackerDoubleTouchedBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerDoubleTouchedBall_default_instance_;
    new (ptr) ::GameEvent_AttackerDoubleTouchedBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerDoubleTouchedBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerDoubleTouchedBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_AttackerDoubleTouchedBall}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_AttackerTooCloseToDefenseArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
    new (ptr) ::GameEvent_AttackerTooCloseToDefenseArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerTooCloseToDefenseArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_AttackerTooCloseToDefenseArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_AttackerTooCloseToDefenseArea}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotHeldBallDeliberately() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotHeldBallDeliberately_default_instance_;
    new (ptr) ::GameEvent_BotHeldBallDeliberately();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotHeldBallDeliberately::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotHeldBallDeliberately =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotHeldBallDeliberately}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_BotInterferedPlacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotInterferedPlacement_default_instance_;
    new (ptr) ::GameEvent_BotInterferedPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotInterferedPlacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_BotInterferedPlacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_BotInterferedPlacement}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_MultipleCards() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_MultipleCards_default_instance_;
    new (ptr) ::GameEvent_MultipleCards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_MultipleCards::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_MultipleCards =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_MultipleCards}, {}};

static void InitDefaultsGameEvent_MultipleFouls() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_MultipleFouls_default_instance_;
    new (ptr) ::GameEvent_MultipleFouls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_MultipleFouls::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_MultipleFouls =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_MultipleFouls}, {}};

static void InitDefaultsGameEvent_MultiplePlacementFailures() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_MultiplePlacementFailures_default_instance_;
    new (ptr) ::GameEvent_MultiplePlacementFailures();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_MultiplePlacementFailures::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_MultiplePlacementFailures =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_MultiplePlacementFailures}, {}};

static void InitDefaultsGameEvent_KickTimeout() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_KickTimeout_default_instance_;
    new (ptr) ::GameEvent_KickTimeout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_KickTimeout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_KickTimeout =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_KickTimeout}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_NoProgressInGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_NoProgressInGame_default_instance_;
    new (ptr) ::GameEvent_NoProgressInGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_NoProgressInGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_NoProgressInGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_NoProgressInGame}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_PlacementFailed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_PlacementFailed_default_instance_;
    new (ptr) ::GameEvent_PlacementFailed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_PlacementFailed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_PlacementFailed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_PlacementFailed}, {}};

static void InitDefaultsGameEvent_UnsportingBehaviorMinor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_UnsportingBehaviorMinor_default_instance_;
    new (ptr) ::GameEvent_UnsportingBehaviorMinor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_UnsportingBehaviorMinor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMinor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_UnsportingBehaviorMinor}, {}};

static void InitDefaultsGameEvent_UnsportingBehaviorMajor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_UnsportingBehaviorMajor_default_instance_;
    new (ptr) ::GameEvent_UnsportingBehaviorMajor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_UnsportingBehaviorMajor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMajor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_UnsportingBehaviorMajor}, {}};

static void InitDefaultsGameEvent_KeeperHeldBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_KeeperHeldBall_default_instance_;
    new (ptr) ::GameEvent_KeeperHeldBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_KeeperHeldBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameEvent_KeeperHeldBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameEvent_KeeperHeldBall}, {
      &protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::scc_info_Location.base,}};

static void InitDefaultsGameEvent_PlacementSucceeded() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_PlacementSucceeded_default_instance_;
    new (ptr) ::GameEvent_PlacementSucceeded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_PlacementSucceeded::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_PlacementSucceeded =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_PlacementSucceeded}, {}};

static void InitDefaultsGameEvent_Prepared() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_Prepared_default_instance_;
    new (ptr) ::GameEvent_Prepared();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_Prepared::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_Prepared =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_Prepared}, {}};

static void InitDefaultsGameEvent_BotSubstitution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotSubstitution_default_instance_;
    new (ptr) ::GameEvent_BotSubstitution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotSubstitution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_BotSubstitution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_BotSubstitution}, {}};

static void InitDefaultsGameEvent_TooManyRobots() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_TooManyRobots_default_instance_;
    new (ptr) ::GameEvent_TooManyRobots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_TooManyRobots::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameEvent_TooManyRobots =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameEvent_TooManyRobots}, {}};

static void InitDefaultsGameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_default_instance_;
    new (ptr) ::GameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<34> scc_info_GameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 34, InitDefaultsGameEvent}, {
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_Prepared.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_NoProgressInGame.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_PlacementFailed.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_PlacementSucceeded.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotSubstitution.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_TooManyRobots.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BallLeftField.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_Goal.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_IndirectGoal.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_ChippedGoal.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AimlessKick.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_KickTimeout.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_KeeperHeldBall.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerDoubleTouchedBall.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTouchedBallInDefenseArea.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotDribbledBallTooFar.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotKickedBallTooFast.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTooCloseToDefenseArea.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotInterferedPlacement.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotCrashDrawn.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotCrashUnique.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotPushedBot.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotHeldBallDeliberately.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotTippedOver.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotTooFastInStop.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderTooCloseToKickPoint.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderInDefenseAreaPartially.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderInDefenseArea.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultipleCards.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultiplePlacementFailures.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultipleFouls.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_UnsportingBehaviorMinor.base,
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_UnsportingBehaviorMajor.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BallLeftField.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_AimlessKick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_Goal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_IndirectGoal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_ChippedGoal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotTooFastInStop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_DefenderTooCloseToKickPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotCrashDrawn.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotCrashUnique.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotPushedBot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotTippedOver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_DefenderInDefenseArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_DefenderInDefenseAreaPartially.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_AttackerTouchedBallInDefenseArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotKickedBallTooFast.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotDribbledBallTooFar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_AttackerDoubleTouchedBall.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_AttackerTooCloseToDefenseArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotHeldBallDeliberately.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotInterferedPlacement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_MultipleCards.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_MultipleFouls.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_MultiplePlacementFailures.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_KickTimeout.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_NoProgressInGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_PlacementFailed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_UnsportingBehaviorMinor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_UnsportingBehaviorMajor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_KeeperHeldBall.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_PlacementSucceeded.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_Prepared.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_BotSubstitution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent_TooManyRobots.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameEvent.base);
}

::google::protobuf::Metadata file_level_metadata[35];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BallLeftField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BallLeftField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BallLeftField, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BallLeftField, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BallLeftField, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AimlessKick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AimlessKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AimlessKick, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AimlessKick, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AimlessKick, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AimlessKick, kick_location_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, kicking_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, kicking_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Goal, kick_location_),
  2,
  4,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_IndirectGoal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_IndirectGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_IndirectGoal, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_IndirectGoal, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_IndirectGoal, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_IndirectGoal, kick_location_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, kick_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_ChippedGoal, max_ball_height_),
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTooFastInStop, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTooFastInStop, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTooFastInStop, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTooFastInStop, speed_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, bot_yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, bot_blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, crash_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, speed_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashDrawn, crash_angle_),
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, violator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, victim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, crash_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, speed_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotCrashUnique, crash_angle_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, violator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, victim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotPushedBot, pushed_distance_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTippedOver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTippedOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTippedOver, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTippedOver, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotTippedOver, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, initial_ball_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, chipped_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, end_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, victim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, location_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, distance_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, duration_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, by_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, location_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultipleCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultipleCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultipleCards, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultipleFouls, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultipleFouls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultipleFouls, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KickTimeout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KickTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KickTimeout, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KickTimeout, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KickTimeout, time_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_NoProgressInGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_NoProgressInGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_NoProgressInGame, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_NoProgressInGame, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementFailed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementFailed, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementFailed, remaining_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KeeperHeldBall, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KeeperHeldBall, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_KeeperHeldBall, duration_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementSucceeded, by_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementSucceeded, time_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementSucceeded, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_PlacementSucceeded, distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Prepared, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Prepared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_Prepared, time_taken_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotSubstitution, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotSubstitution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_BotSubstitution, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_TooManyRobots, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_TooManyRobots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent_TooManyRobots, by_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent, origin_),
  offsetof(::GameEventDefaultTypeInternal, prepared_),
  offsetof(::GameEventDefaultTypeInternal, no_progress_in_game_),
  offsetof(::GameEventDefaultTypeInternal, placement_failed_),
  offsetof(::GameEventDefaultTypeInternal, placement_succeeded_),
  offsetof(::GameEventDefaultTypeInternal, bot_substitution_),
  offsetof(::GameEventDefaultTypeInternal, too_many_robots_),
  offsetof(::GameEventDefaultTypeInternal, ball_left_field_touch_line_),
  offsetof(::GameEventDefaultTypeInternal, ball_left_field_goal_line_),
  offsetof(::GameEventDefaultTypeInternal, possible_goal_),
  offsetof(::GameEventDefaultTypeInternal, goal_),
  offsetof(::GameEventDefaultTypeInternal, indirect_goal_),
  offsetof(::GameEventDefaultTypeInternal, chipped_goal_),
  offsetof(::GameEventDefaultTypeInternal, aimless_kick_),
  offsetof(::GameEventDefaultTypeInternal, kick_timeout_),
  offsetof(::GameEventDefaultTypeInternal, keeper_held_ball_),
  offsetof(::GameEventDefaultTypeInternal, attacker_double_touched_ball_),
  offsetof(::GameEventDefaultTypeInternal, attacker_touched_ball_in_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, attacker_touched_opponent_in_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, attacker_touched_opponent_in_defense_area_skipped_),
  offsetof(::GameEventDefaultTypeInternal, bot_dribbled_ball_too_far_),
  offsetof(::GameEventDefaultTypeInternal, bot_kicked_ball_too_fast_),
  offsetof(::GameEventDefaultTypeInternal, attacker_too_close_to_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, bot_interfered_placement_),
  offsetof(::GameEventDefaultTypeInternal, bot_crash_drawn_),
  offsetof(::GameEventDefaultTypeInternal, bot_crash_unique_),
  offsetof(::GameEventDefaultTypeInternal, bot_crash_unique_skipped_),
  offsetof(::GameEventDefaultTypeInternal, bot_pushed_bot_),
  offsetof(::GameEventDefaultTypeInternal, bot_pushed_bot_skipped_),
  offsetof(::GameEventDefaultTypeInternal, bot_held_ball_deliberately_),
  offsetof(::GameEventDefaultTypeInternal, bot_tipped_over_),
  offsetof(::GameEventDefaultTypeInternal, bot_too_fast_in_stop_),
  offsetof(::GameEventDefaultTypeInternal, defender_too_close_to_kick_point_),
  offsetof(::GameEventDefaultTypeInternal, defender_in_defense_area_partially_),
  offsetof(::GameEventDefaultTypeInternal, defender_in_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, multiple_cards_),
  offsetof(::GameEventDefaultTypeInternal, multiple_placement_failures_),
  offsetof(::GameEventDefaultTypeInternal, multiple_fouls_),
  offsetof(::GameEventDefaultTypeInternal, unsporting_behavior_minor_),
  offsetof(::GameEventDefaultTypeInternal, unsporting_behavior_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameEvent, event_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::GameEvent_BallLeftField)},
  { 11, 20, sizeof(::GameEvent_AimlessKick)},
  { 24, 34, sizeof(::GameEvent_Goal)},
  { 39, 48, sizeof(::GameEvent_IndirectGoal)},
  { 52, 62, sizeof(::GameEvent_ChippedGoal)},
  { 67, 76, sizeof(::GameEvent_BotTooFastInStop)},
  { 80, 89, sizeof(::GameEvent_DefenderTooCloseToKickPoint)},
  { 93, 104, sizeof(::GameEvent_BotCrashDrawn)},
  { 110, 122, sizeof(::GameEvent_BotCrashUnique)},
  { 129, 139, sizeof(::GameEvent_BotPushedBot)},
  { 144, 152, sizeof(::GameEvent_BotTippedOver)},
  { 155, 164, sizeof(::GameEvent_DefenderInDefenseArea)},
  { 168, 177, sizeof(::GameEvent_DefenderInDefenseAreaPartially)},
  { 181, 190, sizeof(::GameEvent_AttackerTouchedBallInDefenseArea)},
  { 194, 204, sizeof(::GameEvent_BotKickedBallTooFast)},
  { 209, 218, sizeof(::GameEvent_BotDribbledBallTooFar)},
  { 222, 231, sizeof(::GameEvent_AttackerTouchedOpponentInDefenseArea)},
  { 235, 243, sizeof(::GameEvent_AttackerDoubleTouchedBall)},
  { 246, 255, sizeof(::GameEvent_AttackerTooCloseToDefenseArea)},
  { 259, 268, sizeof(::GameEvent_BotHeldBallDeliberately)},
  { 272, 280, sizeof(::GameEvent_BotInterferedPlacement)},
  { 283, 289, sizeof(::GameEvent_MultipleCards)},
  { 290, 296, sizeof(::GameEvent_MultipleFouls)},
  { 297, 303, sizeof(::GameEvent_MultiplePlacementFailures)},
  { 304, 312, sizeof(::GameEvent_KickTimeout)},
  { 315, 322, sizeof(::GameEvent_NoProgressInGame)},
  { 324, 331, sizeof(::GameEvent_PlacementFailed)},
  { 333, 340, sizeof(::GameEvent_UnsportingBehaviorMinor)},
  { 342, 349, sizeof(::GameEvent_UnsportingBehaviorMajor)},
  { 351, 359, sizeof(::GameEvent_KeeperHeldBall)},
  { 362, 371, sizeof(::GameEvent_PlacementSucceeded)},
  { 375, 381, sizeof(::GameEvent_Prepared)},
  { 382, 388, sizeof(::GameEvent_BotSubstitution)},
  { 389, 395, sizeof(::GameEvent_TooManyRobots)},
  { 396, 443, sizeof(::GameEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BallLeftField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_AimlessKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_Goal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_IndirectGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_ChippedGoal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotTooFastInStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_DefenderTooCloseToKickPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotCrashDrawn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotCrashUnique_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotPushedBot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotTippedOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_DefenderInDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_DefenderInDefenseAreaPartially_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotKickedBallTooFast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotDribbledBallTooFar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_AttackerDoubleTouchedBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotHeldBallDeliberately_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotInterferedPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_MultipleCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_MultipleFouls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_MultiplePlacementFailures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_KickTimeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_NoProgressInGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_PlacementFailed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_UnsportingBehaviorMinor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_UnsportingBehaviorMajor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_KeeperHeldBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_PlacementSucceeded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_Prepared_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_BotSubstitution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_TooManyRobots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_game_event_2019.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 35);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031ssl_game_event_2019.proto\032 ssl_game_co"
      "ntroller_common.proto\"\376-\n\tGameEvent\022\034\n\004t"
      "ype\030( \002(\0162\016.GameEventType\022\016\n\006origin\030) \003("
      "\t\022\'\n\010prepared\030\001 \001(\0132\023.GameEvent.Prepared"
      "H\000\022:\n\023no_progress_in_game\030\002 \001(\0132\033.GameEv"
      "ent.NoProgressInGameH\000\0226\n\020placement_fail"
      "ed\030\003 \001(\0132\032.GameEvent.PlacementFailedH\000\022<"
      "\n\023placement_succeeded\030\005 \001(\0132\035.GameEvent."
      "PlacementSucceededH\000\0226\n\020bot_substitution"
      "\030% \001(\0132\032.GameEvent.BotSubstitutionH\000\0223\n\017"
      "too_many_robots\030& \001(\0132\030.GameEvent.TooMan"
      "yRobotsH\000\022>\n\032ball_left_field_touch_line\030"
      "\006 \001(\0132\030.GameEvent.BallLeftFieldH\000\022=\n\031bal"
      "l_left_field_goal_line\030\007 \001(\0132\030.GameEvent"
      ".BallLeftFieldH\000\022(\n\rpossible_goal\030\' \001(\0132"
      "\017.GameEvent.GoalH\000\022\037\n\004goal\030\010 \001(\0132\017.GameE"
      "vent.GoalH\000\0220\n\rindirect_goal\030\t \001(\0132\027.Gam"
      "eEvent.IndirectGoalH\000\022.\n\014chipped_goal\030\n "
      "\001(\0132\026.GameEvent.ChippedGoalH\000\022.\n\014aimless"
      "_kick\030\013 \001(\0132\026.GameEvent.AimlessKickH\000\022.\n"
      "\014kick_timeout\030\014 \001(\0132\026.GameEvent.KickTime"
      "outH\000\0225\n\020keeper_held_ball\030\r \001(\0132\031.GameEv"
      "ent.KeeperHeldBallH\000\022L\n\034attacker_double_"
      "touched_ball\030\016 \001(\0132$.GameEvent.AttackerD"
      "oubleTouchedBallH\000\022\\\n%attacker_touched_b"
      "all_in_defense_area\030\017 \001(\0132+.GameEvent.At"
      "tackerTouchedBallInDefenseAreaH\000\022d\n)atta"
      "cker_touched_opponent_in_defense_area\030\020 "
      "\001(\0132/.GameEvent.AttackerTouchedOpponentI"
      "nDefenseAreaH\000\022l\n1attacker_touched_oppon"
      "ent_in_defense_area_skipped\030* \001(\0132/.Game"
      "Event.AttackerTouchedOpponentInDefenseAr"
      "eaH\000\022E\n\031bot_dribbled_ball_too_far\030\021 \001(\0132"
      " .GameEvent.BotDribbledBallTooFarH\000\022C\n\030b"
      "ot_kicked_ball_too_fast\030\022 \001(\0132\037.GameEven"
      "t.BotKickedBallTooFastH\000\022V\n\"attacker_too"
      "_close_to_defense_area\030\023 \001(\0132(.GameEvent"
      ".AttackerTooCloseToDefenseAreaH\000\022E\n\030bot_"
      "interfered_placement\030\024 \001(\0132!.GameEvent.B"
      "otInterferedPlacementH\000\0223\n\017bot_crash_dra"
      "wn\030\025 \001(\0132\030.GameEvent.BotCrashDrawnH\000\0225\n\020"
      "bot_crash_unique\030\026 \001(\0132\031.GameEvent.BotCr"
      "ashUniqueH\000\022=\n\030bot_crash_unique_skipped\030"
      "\027 \001(\0132\031.GameEvent.BotCrashUniqueH\000\0221\n\016bo"
      "t_pushed_bot\030\030 \001(\0132\027.GameEvent.BotPushed"
      "BotH\000\0229\n\026bot_pushed_bot_skipped\030\031 \001(\0132\027."
      "GameEvent.BotPushedBotH\000\022H\n\032bot_held_bal"
      "l_deliberately\030\032 \001(\0132\".GameEvent.BotHeld"
      "BallDeliberatelyH\000\0223\n\017bot_tipped_over\030\033 "
      "\001(\0132\030.GameEvent.BotTippedOverH\000\022;\n\024bot_t"
      "oo_fast_in_stop\030\034 \001(\0132\033.GameEvent.BotToo"
      "FastInStopH\000\022R\n defender_too_close_to_ki"
      "ck_point\030\035 \001(\0132&.GameEvent.DefenderTooCl"
      "oseToKickPointH\000\022W\n\"defender_in_defense_"
      "area_partially\030\036 \001(\0132).GameEvent.Defende"
      "rInDefenseAreaPartiallyH\000\022D\n\030defender_in"
      "_defense_area\030\037 \001(\0132 .GameEvent.Defender"
      "InDefenseAreaH\000\0222\n\016multiple_cards\030  \001(\0132"
      "\030.GameEvent.MultipleCardsH\000\022K\n\033multiple_"
      "placement_failures\030! \001(\0132$.GameEvent.Mul"
      "tiplePlacementFailuresH\000\0222\n\016multiple_fou"
      "ls\030\" \001(\0132\030.GameEvent.MultipleFoulsH\000\022G\n\031"
      "unsporting_behavior_minor\030# \001(\0132\".GameEv"
      "ent.UnsportingBehaviorMinorH\000\022G\n\031unsport"
      "ing_behavior_major\030$ \001(\0132\".GameEvent.Uns"
      "portingBehaviorMajorH\000\032T\n\rBallLeftField\022"
      "\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022"
      "\033\n\010location\030\003 \001(\0132\t.Location\032t\n\013AimlessK"
      "ick\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 "
      "\001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022 \n\rkick"
      "_location\030\004 \001(\0132\t.Location\032\217\001\n\004Goal\022\026\n\007b"
      "y_team\030\001 \002(\0162\005.Team\022\033\n\014kicking_team\030\006 \001("
      "\0162\005.Team\022\023\n\013kicking_bot\030\002 \001(\r\022\033\n\010locatio"
      "n\030\003 \001(\0132\t.Location\022 \n\rkick_location\030\004 \001("
      "\0132\t.Location\032u\n\014IndirectGoal\022\026\n\007by_team\030"
      "\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n\010location"
      "\030\003 \001(\0132\t.Location\022 \n\rkick_location\030\004 \001(\013"
      "2\t.Location\032\215\001\n\013ChippedGoal\022\026\n\007by_team\030\001"
      " \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n\010location\030"
      "\003 \001(\0132\t.Location\022 \n\rkick_location\030\004 \001(\0132"
      "\t.Location\022\027\n\017max_ball_height\030\005 \001(\002\032f\n\020B"
      "otTooFastInStop\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
      "\016\n\006by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Loca"
      "tion\022\r\n\005speed\030\004 \001(\002\032t\n\033DefenderTooCloseT"
      "oKickPoint\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by"
      "_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022"
      "\020\n\010distance\030\004 \001(\002\032\220\001\n\rBotCrashDrawn\022\022\n\nb"
      "ot_yellow\030\001 \001(\r\022\020\n\010bot_blue\030\002 \001(\r\022\033\n\010loc"
      "ation\030\003 \001(\0132\t.Location\022\023\n\013crash_speed\030\004 "
      "\001(\002\022\022\n\nspeed_diff\030\005 \001(\002\022\023\n\013crash_angle\030\006"
      " \001(\002\032\245\001\n\016BotCrashUnique\022\026\n\007by_team\030\001 \002(\016"
      "2\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001("
      "\r\022\033\n\010location\030\004 \001(\0132\t.Location\022\023\n\013crash_"
      "speed\030\005 \001(\002\022\022\n\nspeed_diff\030\006 \001(\002\022\023\n\013crash"
      "_angle\030\007 \001(\002\032~\n\014BotPushedBot\022\026\n\007by_team\030"
      "\001 \002(\0162\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim"
      "\030\003 \001(\r\022\033\n\010location\030\004 \001(\0132\t.Location\022\027\n\017p"
      "ushed_distance\030\005 \001(\002\032T\n\rBotTippedOver\022\026\n"
      "\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n"
      "\010location\030\003 \001(\0132\t.Location\032n\n\025DefenderIn"
      "DefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006b"
      "y_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location"
      "\022\020\n\010distance\030\004 \001(\002\032w\n\036DefenderInDefenseA"
      "reaPartially\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006"
      "by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Locatio"
      "n\022\020\n\010distance\030\004 \001(\002\032y\n AttackerTouchedBa"
      "llInDefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
      "\016\n\006by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Loca"
      "tion\022\020\n\010distance\030\004 \001(\002\032\210\001\n\024BotKickedBall"
      "TooFast\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bo"
      "t\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022\032\n\022"
      "initial_ball_speed\030\004 \001(\002\022\017\n\007chipped\030\005 \001("
      "\010\032q\n\025BotDribbledBallTooFar\022\026\n\007by_team\030\001 "
      "\002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\030\n\005start\030\003 \001("
      "\0132\t.Location\022\026\n\003end\030\004 \001(\0132\t.Location\032{\n$"
      "AttackerTouchedOpponentInDefenseArea\022\026\n\007"
      "by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\016\n\006"
      "victim\030\004 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Locatio"
      "n\032`\n\031AttackerDoubleTouchedBall\022\026\n\007by_tea"
      "m\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\033\n\010locati"
      "on\030\003 \001(\0132\t.Location\032v\n\035AttackerTooCloseT"
      "oDefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006"
      "by_bot\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Locatio"
      "n\022\020\n\010distance\030\004 \001(\002\032p\n\027BotHeldBallDelibe"
      "rately\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot"
      "\030\002 \001(\r\022\033\n\010location\030\003 \001(\0132\t.Location\022\020\n\010d"
      "uration\030\004 \001(\002\032]\n\026BotInterferedPlacement\022"
      "\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022"
      "\033\n\010location\030\003 \001(\0132\t.Location\032\'\n\rMultiple"
      "Cards\022\026\n\007by_team\030\001 \002(\0162\005.Team\032\'\n\rMultipl"
      "eFouls\022\026\n\007by_team\030\001 \002(\0162\005.Team\0323\n\031Multip"
      "lePlacementFailures\022\026\n\007by_team\030\001 \002(\0162\005.T"
      "eam\032P\n\013KickTimeout\022\026\n\007by_team\030\001 \002(\0162\005.Te"
      "am\022\033\n\010location\030\002 \001(\0132\t.Location\022\014\n\004time\030"
      "\003 \001(\002\032=\n\020NoProgressInGame\022\033\n\010location\030\001 "
      "\001(\0132\t.Location\022\014\n\004time\030\002 \001(\002\032E\n\017Placemen"
      "tFailed\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\022remai"
      "ning_distance\030\002 \001(\002\032A\n\027UnsportingBehavio"
      "rMinor\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006reason"
      "\030\002 \002(\t\032A\n\027UnsportingBehaviorMajor\022\026\n\007by_"
      "team\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002(\t\032W\n\016Kee"
      "perHeldBall\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\033\n\010l"
      "ocation\030\002 \001(\0132\t.Location\022\020\n\010duration\030\003 \001"
      "(\002\032e\n\022PlacementSucceeded\022\026\n\007by_team\030\001 \002("
      "\0162\005.Team\022\022\n\ntime_taken\030\002 \001(\002\022\021\n\tprecisio"
      "n\030\003 \001(\002\022\020\n\010distance\030\004 \001(\002\032\036\n\010Prepared\022\022\n"
      "\ntime_taken\030\001 \001(\002\032)\n\017BotSubstitution\022\026\n\007"
      "by_team\030\001 \002(\0162\005.Team\032\'\n\rTooManyRobots\022\026\n"
      "\007by_team\030\001 \002(\0162\005.TeamB\007\n\005event*\331\010\n\rGameE"
      "ventType\022\033\n\027UNKNOWN_GAME_EVENT_TYPE\020\000\022\014\n"
      "\010PREPARED\020\001\022\027\n\023NO_PROGRESS_IN_GAME\020\002\022\024\n\020"
      "PLACEMENT_FAILED\020\003\022\027\n\023PLACEMENT_SUCCEEDE"
      "D\020\005\022\024\n\020BOT_SUBSTITUTION\020%\022\023\n\017TOO_MANY_RO"
      "BOTS\020&\022\036\n\032BALL_LEFT_FIELD_TOUCH_LINE\020\006\022\035"
      "\n\031BALL_LEFT_FIELD_GOAL_LINE\020\007\022\021\n\rPOSSIBL"
      "E_GOAL\020\'\022\010\n\004GOAL\020\010\022\021\n\rINDIRECT_GOAL\020\t\022\020\n"
      "\014CHIPPED_GOAL\020\n\022\020\n\014AIMLESS_KICK\020\013\022\020\n\014KIC"
      "K_TIMEOUT\020\014\022\024\n\020KEEPER_HELD_BALL\020\r\022 \n\034ATT"
      "ACKER_DOUBLE_TOUCHED_BALL\020\016\022)\n%ATTACKER_"
      "TOUCHED_BALL_IN_DEFENSE_AREA\020\017\022-\n)ATTACK"
      "ER_TOUCHED_OPPONENT_IN_DEFENSE_AREA\020\020\0225\n"
      "1ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AR"
      "EA_SKIPPED\020(\022\035\n\031BOT_DRIBBLED_BALL_TOO_FA"
      "R\020\021\022\034\n\030BOT_KICKED_BALL_TOO_FAST\020\022\022&\n\"ATT"
      "ACKER_TOO_CLOSE_TO_DEFENSE_AREA\020\023\022\034\n\030BOT"
      "_INTERFERED_PLACEMENT\020\024\022\023\n\017BOT_CRASH_DRA"
      "WN\020\025\022\024\n\020BOT_CRASH_UNIQUE\020\026\022\034\n\030BOT_CRASH_"
      "UNIQUE_SKIPPED\020\027\022\022\n\016BOT_PUSHED_BOT\020\030\022\032\n\026"
      "BOT_PUSHED_BOT_SKIPPED\020\031\022\036\n\032BOT_HELD_BAL"
      "L_DELIBERATELY\020\032\022\023\n\017BOT_TIPPED_OVER\020\033\022\030\n"
      "\024BOT_TOO_FAST_IN_STOP\020\034\022$\n DEFENDER_TOO_"
      "CLOSE_TO_KICK_POINT\020\035\022&\n\"DEFENDER_IN_DEF"
      "ENSE_AREA_PARTIALLY\020\036\022\034\n\030DEFENDER_IN_DEF"
      "ENSE_AREA\020\037\022\022\n\016MULTIPLE_CARDS\020 \022\037\n\033MULTI"
      "PLE_PLACEMENT_FAILURES\020!\022\022\n\016MULTIPLE_FOU"
      "LS\020\"\022\035\n\031UNSPORTING_BEHAVIOR_MINOR\020#\022\035\n\031U"
      "NSPORTING_BEHAVIOR_MAJOR\020$"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7066);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_game_event_2019.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgame_5fcontroller_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fgame_5fevent_5f2019_2eproto
const ::google::protobuf::EnumDescriptor* GameEventType_descriptor() {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_enum_descriptors[0];
}
bool GameEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameEvent_BallLeftField::InitAsDefaultInstance() {
  ::_GameEvent_BallLeftField_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BallLeftField::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BallLeftField::kByTeamFieldNumber;
const int GameEvent_BallLeftField::kByBotFieldNumber;
const int GameEvent_BallLeftField::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BallLeftField::GameEvent_BallLeftField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BallLeftField.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BallLeftField)
}
GameEvent_BallLeftField::GameEvent_BallLeftField(const GameEvent_BallLeftField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BallLeftField)
}

void GameEvent_BallLeftField::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BallLeftField::~GameEvent_BallLeftField() {
  // @@protoc_insertion_point(destructor:GameEvent.BallLeftField)
  SharedDtor();
}

void GameEvent_BallLeftField::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BallLeftField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BallLeftField::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BallLeftField& GameEvent_BallLeftField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BallLeftField.base);
  return *internal_default_instance();
}


void GameEvent_BallLeftField::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BallLeftField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BallLeftField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BallLeftField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BallLeftField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BallLeftField)
  return false;
#undef DO_
}

void GameEvent_BallLeftField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BallLeftField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BallLeftField)
}

::google::protobuf::uint8* GameEvent_BallLeftField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BallLeftField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BallLeftField)
  return target;
}

size_t GameEvent_BallLeftField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BallLeftField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BallLeftField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BallLeftField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BallLeftField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BallLeftField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BallLeftField)
    MergeFrom(*source);
  }
}

void GameEvent_BallLeftField::MergeFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BallLeftField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BallLeftField::CopyFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BallLeftField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BallLeftField::Swap(GameEvent_BallLeftField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BallLeftField::InternalSwap(GameEvent_BallLeftField* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BallLeftField::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_AimlessKick::InitAsDefaultInstance() {
  ::_GameEvent_AimlessKick_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  ::_GameEvent_AimlessKick_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_AimlessKick::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
void GameEvent_AimlessKick::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->Clear();
  clear_has_kick_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AimlessKick::kByTeamFieldNumber;
const int GameEvent_AimlessKick::kByBotFieldNumber;
const int GameEvent_AimlessKick::kLocationFieldNumber;
const int GameEvent_AimlessKick::kKickLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AimlessKick::GameEvent_AimlessKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AimlessKick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AimlessKick)
}
GameEvent_AimlessKick::GameEvent_AimlessKick(const GameEvent_AimlessKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AimlessKick)
}

void GameEvent_AimlessKick::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_AimlessKick::~GameEvent_AimlessKick() {
  // @@protoc_insertion_point(destructor:GameEvent.AimlessKick)
  SharedDtor();
}

void GameEvent_AimlessKick::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_AimlessKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_AimlessKick::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AimlessKick& GameEvent_AimlessKick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AimlessKick.base);
  return *internal_default_instance();
}


void GameEvent_AimlessKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AimlessKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AimlessKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AimlessKick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AimlessKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AimlessKick)
  return false;
#undef DO_
}

void GameEvent_AimlessKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AimlessKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_kick_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AimlessKick)
}

::google::protobuf::uint8* GameEvent_AimlessKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AimlessKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_kick_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AimlessKick)
  return target;
}

size_t GameEvent_AimlessKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AimlessKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AimlessKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AimlessKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AimlessKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AimlessKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AimlessKick)
    MergeFrom(*source);
  }
}

void GameEvent_AimlessKick::MergeFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AimlessKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AimlessKick::CopyFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AimlessKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AimlessKick::Swap(GameEvent_AimlessKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AimlessKick::InternalSwap(GameEvent_AimlessKick* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(kick_location_, other->kick_location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_AimlessKick::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_Goal::InitAsDefaultInstance() {
  ::_GameEvent_Goal_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  ::_GameEvent_Goal_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_Goal::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
void GameEvent_Goal::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->Clear();
  clear_has_kick_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_Goal::kByTeamFieldNumber;
const int GameEvent_Goal::kKickingTeamFieldNumber;
const int GameEvent_Goal::kKickingBotFieldNumber;
const int GameEvent_Goal::kLocationFieldNumber;
const int GameEvent_Goal::kKickLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_Goal::GameEvent_Goal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_Goal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.Goal)
}
GameEvent_Goal::GameEvent_Goal(const GameEvent_Goal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&kicking_team_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(kicking_team_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.Goal)
}

void GameEvent_Goal::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kicking_team_) -
      reinterpret_cast<char*>(&location_)) + sizeof(kicking_team_));
}

GameEvent_Goal::~GameEvent_Goal() {
  // @@protoc_insertion_point(destructor:GameEvent.Goal)
  SharedDtor();
}

void GameEvent_Goal::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_Goal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_Goal::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_Goal& GameEvent_Goal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_Goal.base);
  return *internal_default_instance();
}


void GameEvent_Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Goal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kicking_team_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(kicking_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_Goal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.Goal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kicking_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_kicking_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kicking_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team kicking_team = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_kicking_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.Goal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.Goal)
  return false;
#undef DO_
}

void GameEvent_Goal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.Goal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 kicking_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kicking_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_kick_location(), output);
  }

  // optional .Team kicking_team = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->kicking_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.Goal)
}

::google::protobuf::uint8* GameEvent_Goal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Goal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 kicking_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kicking_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_kick_location(), deterministic, target);
  }

  // optional .Team kicking_team = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->kicking_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Goal)
  return target;
}

size_t GameEvent_Goal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Goal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 kicking_bot = 2;
    if (has_kicking_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kicking_bot());
    }

    // optional .Team kicking_team = 6;
    if (has_kicking_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kicking_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_Goal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_Goal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_Goal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.Goal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.Goal)
    MergeFrom(*source);
  }
}

void GameEvent_Goal::MergeFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      kicking_bot_ = from.kicking_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      kicking_team_ = from.kicking_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_Goal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_Goal::CopyFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Goal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_Goal::Swap(GameEvent_Goal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_Goal::InternalSwap(GameEvent_Goal* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(kick_location_, other->kick_location_);
  swap(by_team_, other->by_team_);
  swap(kicking_bot_, other->kicking_bot_);
  swap(kicking_team_, other->kicking_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_Goal::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_IndirectGoal::InitAsDefaultInstance() {
  ::_GameEvent_IndirectGoal_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  ::_GameEvent_IndirectGoal_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_IndirectGoal::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
void GameEvent_IndirectGoal::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->Clear();
  clear_has_kick_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_IndirectGoal::kByTeamFieldNumber;
const int GameEvent_IndirectGoal::kByBotFieldNumber;
const int GameEvent_IndirectGoal::kLocationFieldNumber;
const int GameEvent_IndirectGoal::kKickLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_IndirectGoal::GameEvent_IndirectGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_IndirectGoal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.IndirectGoal)
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(const GameEvent_IndirectGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.IndirectGoal)
}

void GameEvent_IndirectGoal::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_IndirectGoal::~GameEvent_IndirectGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.IndirectGoal)
  SharedDtor();
}

void GameEvent_IndirectGoal::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_IndirectGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_IndirectGoal::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_IndirectGoal& GameEvent_IndirectGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_IndirectGoal.base);
  return *internal_default_instance();
}


void GameEvent_IndirectGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.IndirectGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_IndirectGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.IndirectGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.IndirectGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.IndirectGoal)
  return false;
#undef DO_
}

void GameEvent_IndirectGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.IndirectGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_kick_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.IndirectGoal)
}

::google::protobuf::uint8* GameEvent_IndirectGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.IndirectGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_kick_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.IndirectGoal)
  return target;
}

size_t GameEvent_IndirectGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.IndirectGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_IndirectGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_IndirectGoal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_IndirectGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.IndirectGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.IndirectGoal)
    MergeFrom(*source);
  }
}

void GameEvent_IndirectGoal::MergeFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_IndirectGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_IndirectGoal::CopyFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_IndirectGoal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_IndirectGoal::Swap(GameEvent_IndirectGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_IndirectGoal::InternalSwap(GameEvent_IndirectGoal* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(kick_location_, other->kick_location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_IndirectGoal::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_ChippedGoal::InitAsDefaultInstance() {
  ::_GameEvent_ChippedGoal_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  ::_GameEvent_ChippedGoal_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_ChippedGoal::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
void GameEvent_ChippedGoal::clear_kick_location() {
  if (kick_location_ != NULL) kick_location_->Clear();
  clear_has_kick_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_ChippedGoal::kByTeamFieldNumber;
const int GameEvent_ChippedGoal::kByBotFieldNumber;
const int GameEvent_ChippedGoal::kLocationFieldNumber;
const int GameEvent_ChippedGoal::kKickLocationFieldNumber;
const int GameEvent_ChippedGoal::kMaxBallHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_ChippedGoal::GameEvent_ChippedGoal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_ChippedGoal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.ChippedGoal)
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(const GameEvent_ChippedGoal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_kick_location()) {
    kick_location_ = new ::Location(*from.kick_location_);
  } else {
    kick_location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_ball_height_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(max_ball_height_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChippedGoal)
}

void GameEvent_ChippedGoal::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_ball_height_) -
      reinterpret_cast<char*>(&location_)) + sizeof(max_ball_height_));
}

GameEvent_ChippedGoal::~GameEvent_ChippedGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.ChippedGoal)
  SharedDtor();
}

void GameEvent_ChippedGoal::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_ChippedGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_ChippedGoal::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_ChippedGoal& GameEvent_ChippedGoal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_ChippedGoal.base);
  return *internal_default_instance();
}


void GameEvent_ChippedGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChippedGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != NULL);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ball_height_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(max_ball_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_ChippedGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.ChippedGoal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location kick_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_ball_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_ball_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_ball_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.ChippedGoal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.ChippedGoal)
  return false;
#undef DO_
}

void GameEvent_ChippedGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.ChippedGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_kick_location(), output);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_ball_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.ChippedGoal)
}

::google::protobuf::uint8* GameEvent_ChippedGoal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChippedGoal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional .Location kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_kick_location(), deterministic, target);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_ball_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChippedGoal)
  return target;
}

size_t GameEvent_ChippedGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChippedGoal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Location kick_location = 4;
    if (has_kick_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float max_ball_height = 5;
    if (has_max_ball_height()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_ChippedGoal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_ChippedGoal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_ChippedGoal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.ChippedGoal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.ChippedGoal)
    MergeFrom(*source);
  }
}

void GameEvent_ChippedGoal::MergeFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kick_location()->::Location::MergeFrom(from.kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_ball_height_ = from.max_ball_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_ChippedGoal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_ChippedGoal::CopyFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChippedGoal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_kick_location()) {
    if (!this->kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_ChippedGoal::Swap(GameEvent_ChippedGoal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_ChippedGoal::InternalSwap(GameEvent_ChippedGoal* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(kick_location_, other->kick_location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(max_ball_height_, other->max_ball_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_ChippedGoal::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotTooFastInStop::InitAsDefaultInstance() {
  ::_GameEvent_BotTooFastInStop_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotTooFastInStop::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotTooFastInStop::kByTeamFieldNumber;
const int GameEvent_BotTooFastInStop::kByBotFieldNumber;
const int GameEvent_BotTooFastInStop::kLocationFieldNumber;
const int GameEvent_BotTooFastInStop::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotTooFastInStop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotTooFastInStop)
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(const GameEvent_BotTooFastInStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTooFastInStop)
}

void GameEvent_BotTooFastInStop::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&location_)) + sizeof(speed_));
}

GameEvent_BotTooFastInStop::~GameEvent_BotTooFastInStop() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTooFastInStop)
  SharedDtor();
}

void GameEvent_BotTooFastInStop::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotTooFastInStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotTooFastInStop::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotTooFastInStop& GameEvent_BotTooFastInStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotTooFastInStop.base);
  return *internal_default_instance();
}


void GameEvent_BotTooFastInStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTooFastInStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotTooFastInStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotTooFastInStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotTooFastInStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotTooFastInStop)
  return false;
#undef DO_
}

void GameEvent_BotTooFastInStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotTooFastInStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotTooFastInStop)
}

::google::protobuf::uint8* GameEvent_BotTooFastInStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTooFastInStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTooFastInStop)
  return target;
}

size_t GameEvent_BotTooFastInStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTooFastInStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotTooFastInStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotTooFastInStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotTooFastInStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotTooFastInStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotTooFastInStop)
    MergeFrom(*source);
  }
}

void GameEvent_BotTooFastInStop::MergeFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotTooFastInStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotTooFastInStop::CopyFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTooFastInStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTooFastInStop::Swap(GameEvent_BotTooFastInStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotTooFastInStop::InternalSwap(GameEvent_BotTooFastInStop* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotTooFastInStop::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_DefenderTooCloseToKickPoint::InitAsDefaultInstance() {
  ::_GameEvent_DefenderTooCloseToKickPoint_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_DefenderTooCloseToKickPoint::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_DefenderTooCloseToKickPoint::kByTeamFieldNumber;
const int GameEvent_DefenderTooCloseToKickPoint::kByBotFieldNumber;
const int GameEvent_DefenderTooCloseToKickPoint::kLocationFieldNumber;
const int GameEvent_DefenderTooCloseToKickPoint::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderTooCloseToKickPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.DefenderTooCloseToKickPoint)
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(const GameEvent_DefenderTooCloseToKickPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderTooCloseToKickPoint)
}

void GameEvent_DefenderTooCloseToKickPoint::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_DefenderTooCloseToKickPoint::~GameEvent_DefenderTooCloseToKickPoint() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderTooCloseToKickPoint)
  SharedDtor();
}

void GameEvent_DefenderTooCloseToKickPoint::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_DefenderTooCloseToKickPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_DefenderTooCloseToKickPoint::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_DefenderTooCloseToKickPoint& GameEvent_DefenderTooCloseToKickPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderTooCloseToKickPoint.base);
  return *internal_default_instance();
}


void GameEvent_DefenderTooCloseToKickPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderTooCloseToKickPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_DefenderTooCloseToKickPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.DefenderTooCloseToKickPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.DefenderTooCloseToKickPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.DefenderTooCloseToKickPoint)
  return false;
#undef DO_
}

void GameEvent_DefenderTooCloseToKickPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.DefenderTooCloseToKickPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.DefenderTooCloseToKickPoint)
}

::google::protobuf::uint8* GameEvent_DefenderTooCloseToKickPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderTooCloseToKickPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderTooCloseToKickPoint)
  return target;
}

size_t GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderTooCloseToKickPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_DefenderTooCloseToKickPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderTooCloseToKickPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_DefenderTooCloseToKickPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderTooCloseToKickPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderTooCloseToKickPoint)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderTooCloseToKickPoint::MergeFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderTooCloseToKickPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderTooCloseToKickPoint::Swap(GameEvent_DefenderTooCloseToKickPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_DefenderTooCloseToKickPoint::InternalSwap(GameEvent_DefenderTooCloseToKickPoint* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_DefenderTooCloseToKickPoint::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotCrashDrawn::InitAsDefaultInstance() {
  ::_GameEvent_BotCrashDrawn_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotCrashDrawn::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotCrashDrawn::kBotYellowFieldNumber;
const int GameEvent_BotCrashDrawn::kBotBlueFieldNumber;
const int GameEvent_BotCrashDrawn::kLocationFieldNumber;
const int GameEvent_BotCrashDrawn::kCrashSpeedFieldNumber;
const int GameEvent_BotCrashDrawn::kSpeedDiffFieldNumber;
const int GameEvent_BotCrashDrawn::kCrashAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotCrashDrawn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotCrashDrawn)
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(const GameEvent_BotCrashDrawn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&bot_yellow_, &from.bot_yellow_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&bot_yellow_)) + sizeof(crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashDrawn)
}

void GameEvent_BotCrashDrawn::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_angle_) -
      reinterpret_cast<char*>(&location_)) + sizeof(crash_angle_));
}

GameEvent_BotCrashDrawn::~GameEvent_BotCrashDrawn() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashDrawn)
  SharedDtor();
}

void GameEvent_BotCrashDrawn::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotCrashDrawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotCrashDrawn::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotCrashDrawn& GameEvent_BotCrashDrawn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotCrashDrawn.base);
  return *internal_default_instance();
}


void GameEvent_BotCrashDrawn::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashDrawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&bot_yellow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crash_angle_) -
        reinterpret_cast<char*>(&bot_yellow_)) + sizeof(crash_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotCrashDrawn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotCrashDrawn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bot_yellow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bot_yellow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_yellow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_blue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bot_blue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_crash_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_diff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_speed_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_angle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_crash_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotCrashDrawn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotCrashDrawn)
  return false;
#undef DO_
}

void GameEvent_BotCrashDrawn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotCrashDrawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bot_yellow = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bot_yellow(), output);
  }

  // optional uint32 bot_blue = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bot_blue(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float crash_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->crash_speed(), output);
  }

  // optional float speed_diff = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_diff(), output);
  }

  // optional float crash_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->crash_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotCrashDrawn)
}

::google::protobuf::uint8* GameEvent_BotCrashDrawn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashDrawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bot_yellow = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bot_yellow(), target);
  }

  // optional uint32 bot_blue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bot_blue(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float crash_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->crash_speed(), target);
  }

  // optional float speed_diff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_diff(), target);
  }

  // optional float crash_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->crash_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashDrawn)
  return target;
}

size_t GameEvent_BotCrashDrawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashDrawn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 bot_yellow = 1;
    if (has_bot_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_yellow());
    }

    // optional uint32 bot_blue = 2;
    if (has_bot_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_blue());
    }

    // optional float crash_speed = 4;
    if (has_crash_speed()) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 5;
    if (has_speed_diff()) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 6;
    if (has_crash_angle()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotCrashDrawn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotCrashDrawn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotCrashDrawn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotCrashDrawn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotCrashDrawn)
    MergeFrom(*source);
  }
}

void GameEvent_BotCrashDrawn::MergeFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      bot_yellow_ = from.bot_yellow_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_blue_ = from.bot_blue_;
    }
    if (cached_has_bits & 0x00000008u) {
      crash_speed_ = from.crash_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_diff_ = from.speed_diff_;
    }
    if (cached_has_bits & 0x00000020u) {
      crash_angle_ = from.crash_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotCrashDrawn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotCrashDrawn::CopyFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashDrawn::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashDrawn::Swap(GameEvent_BotCrashDrawn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotCrashDrawn::InternalSwap(GameEvent_BotCrashDrawn* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(bot_yellow_, other->bot_yellow_);
  swap(bot_blue_, other->bot_blue_);
  swap(crash_speed_, other->crash_speed_);
  swap(speed_diff_, other->speed_diff_);
  swap(crash_angle_, other->crash_angle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotCrashDrawn::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotCrashUnique::InitAsDefaultInstance() {
  ::_GameEvent_BotCrashUnique_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotCrashUnique::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotCrashUnique::kByTeamFieldNumber;
const int GameEvent_BotCrashUnique::kViolatorFieldNumber;
const int GameEvent_BotCrashUnique::kVictimFieldNumber;
const int GameEvent_BotCrashUnique::kLocationFieldNumber;
const int GameEvent_BotCrashUnique::kCrashSpeedFieldNumber;
const int GameEvent_BotCrashUnique::kSpeedDiffFieldNumber;
const int GameEvent_BotCrashUnique::kCrashAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotCrashUnique::GameEvent_BotCrashUnique()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotCrashUnique.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotCrashUnique)
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(const GameEvent_BotCrashUnique& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashUnique)
}

void GameEvent_BotCrashUnique::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_angle_) -
      reinterpret_cast<char*>(&location_)) + sizeof(crash_angle_));
}

GameEvent_BotCrashUnique::~GameEvent_BotCrashUnique() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashUnique)
  SharedDtor();
}

void GameEvent_BotCrashUnique::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotCrashUnique::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotCrashUnique::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotCrashUnique& GameEvent_BotCrashUnique::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotCrashUnique.base);
  return *internal_default_instance();
}


void GameEvent_BotCrashUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crash_angle_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(crash_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotCrashUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotCrashUnique)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 violator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_violator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &violator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_victim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_crash_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_diff = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_speed_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float crash_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_crash_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crash_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotCrashUnique)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotCrashUnique)
  return false;
#undef DO_
}

void GameEvent_BotCrashUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotCrashUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->violator(), output);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->victim(), output);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_location(), output);
  }

  // optional float crash_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->crash_speed(), output);
  }

  // optional float speed_diff = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed_diff(), output);
  }

  // optional float crash_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->crash_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotCrashUnique)
}

::google::protobuf::uint8* GameEvent_BotCrashUnique::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->victim(), target);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_location(), deterministic, target);
  }

  // optional float crash_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->crash_speed(), target);
  }

  // optional float speed_diff = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed_diff(), target);
  }

  // optional float crash_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->crash_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashUnique)
  return target;
}

size_t GameEvent_BotCrashUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashUnique)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 4;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional uint32 violator = 2;
    if (has_violator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->violator());
    }

    // optional uint32 victim = 3;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim());
    }

    // optional float crash_speed = 5;
    if (has_crash_speed()) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 6;
    if (has_speed_diff()) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 7;
    if (has_crash_angle()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotCrashUnique::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotCrashUnique* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotCrashUnique>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotCrashUnique)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotCrashUnique)
    MergeFrom(*source);
  }
}

void GameEvent_BotCrashUnique::MergeFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      violator_ = from.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      crash_speed_ = from.crash_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_diff_ = from.speed_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      crash_angle_ = from.crash_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotCrashUnique::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotCrashUnique::CopyFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashUnique::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashUnique::Swap(GameEvent_BotCrashUnique* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotCrashUnique::InternalSwap(GameEvent_BotCrashUnique* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(violator_, other->violator_);
  swap(victim_, other->victim_);
  swap(crash_speed_, other->crash_speed_);
  swap(speed_diff_, other->speed_diff_);
  swap(crash_angle_, other->crash_angle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotCrashUnique::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotPushedBot::InitAsDefaultInstance() {
  ::_GameEvent_BotPushedBot_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotPushedBot::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotPushedBot::kByTeamFieldNumber;
const int GameEvent_BotPushedBot::kViolatorFieldNumber;
const int GameEvent_BotPushedBot::kVictimFieldNumber;
const int GameEvent_BotPushedBot::kLocationFieldNumber;
const int GameEvent_BotPushedBot::kPushedDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotPushedBot::GameEvent_BotPushedBot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotPushedBot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotPushedBot)
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(const GameEvent_BotPushedBot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&pushed_distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(pushed_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotPushedBot)
}

void GameEvent_BotPushedBot::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pushed_distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(pushed_distance_));
}

GameEvent_BotPushedBot::~GameEvent_BotPushedBot() {
  // @@protoc_insertion_point(destructor:GameEvent.BotPushedBot)
  SharedDtor();
}

void GameEvent_BotPushedBot::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotPushedBot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotPushedBot::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotPushedBot& GameEvent_BotPushedBot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotPushedBot.base);
  return *internal_default_instance();
}


void GameEvent_BotPushedBot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotPushedBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pushed_distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(pushed_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotPushedBot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotPushedBot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 violator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_violator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &violator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_victim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pushed_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_pushed_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pushed_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotPushedBot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotPushedBot)
  return false;
#undef DO_
}

void GameEvent_BotPushedBot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotPushedBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->violator(), output);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->victim(), output);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_location(), output);
  }

  // optional float pushed_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pushed_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotPushedBot)
}

::google::protobuf::uint8* GameEvent_BotPushedBot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotPushedBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->victim(), target);
  }

  // optional .Location location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_location(), deterministic, target);
  }

  // optional float pushed_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pushed_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotPushedBot)
  return target;
}

size_t GameEvent_BotPushedBot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotPushedBot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 4;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 violator = 2;
    if (has_violator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->violator());
    }

    // optional uint32 victim = 3;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim());
    }

    // optional float pushed_distance = 5;
    if (has_pushed_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotPushedBot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotPushedBot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotPushedBot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotPushedBot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotPushedBot)
    MergeFrom(*source);
  }
}

void GameEvent_BotPushedBot::MergeFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      violator_ = from.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      pushed_distance_ = from.pushed_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotPushedBot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotPushedBot::CopyFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotPushedBot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotPushedBot::Swap(GameEvent_BotPushedBot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotPushedBot::InternalSwap(GameEvent_BotPushedBot* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(violator_, other->violator_);
  swap(victim_, other->victim_);
  swap(pushed_distance_, other->pushed_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotPushedBot::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotTippedOver::InitAsDefaultInstance() {
  ::_GameEvent_BotTippedOver_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotTippedOver::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotTippedOver::kByTeamFieldNumber;
const int GameEvent_BotTippedOver::kByBotFieldNumber;
const int GameEvent_BotTippedOver::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotTippedOver::GameEvent_BotTippedOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotTippedOver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotTippedOver)
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(const GameEvent_BotTippedOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTippedOver)
}

void GameEvent_BotTippedOver::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BotTippedOver::~GameEvent_BotTippedOver() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTippedOver)
  SharedDtor();
}

void GameEvent_BotTippedOver::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotTippedOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotTippedOver::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotTippedOver& GameEvent_BotTippedOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotTippedOver.base);
  return *internal_default_instance();
}


void GameEvent_BotTippedOver::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTippedOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotTippedOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotTippedOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotTippedOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotTippedOver)
  return false;
#undef DO_
}

void GameEvent_BotTippedOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotTippedOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotTippedOver)
}

::google::protobuf::uint8* GameEvent_BotTippedOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTippedOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTippedOver)
  return target;
}

size_t GameEvent_BotTippedOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTippedOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotTippedOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotTippedOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotTippedOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotTippedOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotTippedOver)
    MergeFrom(*source);
  }
}

void GameEvent_BotTippedOver::MergeFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotTippedOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotTippedOver::CopyFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTippedOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTippedOver::Swap(GameEvent_BotTippedOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotTippedOver::InternalSwap(GameEvent_BotTippedOver* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotTippedOver::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_DefenderInDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_DefenderInDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_DefenderInDefenseArea::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_DefenderInDefenseArea::kByTeamFieldNumber;
const int GameEvent_DefenderInDefenseArea::kByBotFieldNumber;
const int GameEvent_DefenderInDefenseArea::kLocationFieldNumber;
const int GameEvent_DefenderInDefenseArea::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderInDefenseArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.DefenderInDefenseArea)
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(const GameEvent_DefenderInDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseArea)
}

void GameEvent_DefenderInDefenseArea::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_DefenderInDefenseArea::~GameEvent_DefenderInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseArea)
  SharedDtor();
}

void GameEvent_DefenderInDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_DefenderInDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_DefenderInDefenseArea::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_DefenderInDefenseArea& GameEvent_DefenderInDefenseArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderInDefenseArea.base);
  return *internal_default_instance();
}


void GameEvent_DefenderInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_DefenderInDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.DefenderInDefenseArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.DefenderInDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.DefenderInDefenseArea)
  return false;
#undef DO_
}

void GameEvent_DefenderInDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.DefenderInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.DefenderInDefenseArea)
}

::google::protobuf::uint8* GameEvent_DefenderInDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseArea)
  return target;
}

size_t GameEvent_DefenderInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_DefenderInDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderInDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_DefenderInDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderInDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderInDefenseArea::MergeFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseArea::Swap(GameEvent_DefenderInDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_DefenderInDefenseArea::InternalSwap(GameEvent_DefenderInDefenseArea* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_DefenderInDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_DefenderInDefenseAreaPartially::InitAsDefaultInstance() {
  ::_GameEvent_DefenderInDefenseAreaPartially_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_DefenderInDefenseAreaPartially::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_DefenderInDefenseAreaPartially::kByTeamFieldNumber;
const int GameEvent_DefenderInDefenseAreaPartially::kByBotFieldNumber;
const int GameEvent_DefenderInDefenseAreaPartially::kLocationFieldNumber;
const int GameEvent_DefenderInDefenseAreaPartially::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderInDefenseAreaPartially.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.DefenderInDefenseAreaPartially)
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(const GameEvent_DefenderInDefenseAreaPartially& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseAreaPartially)
}

void GameEvent_DefenderInDefenseAreaPartially::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_DefenderInDefenseAreaPartially::~GameEvent_DefenderInDefenseAreaPartially() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseAreaPartially)
  SharedDtor();
}

void GameEvent_DefenderInDefenseAreaPartially::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_DefenderInDefenseAreaPartially::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_DefenderInDefenseAreaPartially::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_DefenderInDefenseAreaPartially& GameEvent_DefenderInDefenseAreaPartially::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_DefenderInDefenseAreaPartially.base);
  return *internal_default_instance();
}


void GameEvent_DefenderInDefenseAreaPartially::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseAreaPartially)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_DefenderInDefenseAreaPartially::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.DefenderInDefenseAreaPartially)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.DefenderInDefenseAreaPartially)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.DefenderInDefenseAreaPartially)
  return false;
#undef DO_
}

void GameEvent_DefenderInDefenseAreaPartially::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.DefenderInDefenseAreaPartially)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.DefenderInDefenseAreaPartially)
}

::google::protobuf::uint8* GameEvent_DefenderInDefenseAreaPartially::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseAreaPartially)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseAreaPartially)
  return target;
}

size_t GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseAreaPartially)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_DefenderInDefenseAreaPartially::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderInDefenseAreaPartially* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_DefenderInDefenseAreaPartially>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderInDefenseAreaPartially)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderInDefenseAreaPartially)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderInDefenseAreaPartially::MergeFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseAreaPartially::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseAreaPartially::Swap(GameEvent_DefenderInDefenseAreaPartially* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_DefenderInDefenseAreaPartially::InternalSwap(GameEvent_DefenderInDefenseAreaPartially* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_DefenderInDefenseAreaPartially::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_AttackerTouchedBallInDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerTouchedBallInDefenseArea::kByTeamFieldNumber;
const int GameEvent_AttackerTouchedBallInDefenseArea::kByBotFieldNumber;
const int GameEvent_AttackerTouchedBallInDefenseArea::kLocationFieldNumber;
const int GameEvent_AttackerTouchedBallInDefenseArea::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTouchedBallInDefenseArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(const GameEvent_AttackerTouchedBallInDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}

void GameEvent_AttackerTouchedBallInDefenseArea::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_AttackerTouchedBallInDefenseArea::~GameEvent_AttackerTouchedBallInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedBallInDefenseArea)
  SharedDtor();
}

void GameEvent_AttackerTouchedBallInDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerTouchedBallInDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_AttackerTouchedBallInDefenseArea::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerTouchedBallInDefenseArea& GameEvent_AttackerTouchedBallInDefenseArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTouchedBallInDefenseArea.base);
  return *internal_default_instance();
}


void GameEvent_AttackerTouchedBallInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerTouchedBallInDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerTouchedBallInDefenseArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerTouchedBallInDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerTouchedBallInDefenseArea)
  return false;
#undef DO_
}

void GameEvent_AttackerTouchedBallInDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerTouchedBallInDefenseArea)
}

::google::protobuf::uint8* GameEvent_AttackerTouchedBallInDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedBallInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedBallInDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTouchedBallInDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerTouchedBallInDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTouchedBallInDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTouchedBallInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedBallInDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedBallInDefenseArea::Swap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerTouchedBallInDefenseArea::InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_AttackerTouchedBallInDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotKickedBallTooFast::InitAsDefaultInstance() {
  ::_GameEvent_BotKickedBallTooFast_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotKickedBallTooFast::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotKickedBallTooFast::kByTeamFieldNumber;
const int GameEvent_BotKickedBallTooFast::kByBotFieldNumber;
const int GameEvent_BotKickedBallTooFast::kLocationFieldNumber;
const int GameEvent_BotKickedBallTooFast::kInitialBallSpeedFieldNumber;
const int GameEvent_BotKickedBallTooFast::kChippedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotKickedBallTooFast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotKickedBallTooFast)
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(const GameEvent_BotKickedBallTooFast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&chipped_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(chipped_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotKickedBallTooFast)
}

void GameEvent_BotKickedBallTooFast::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chipped_) -
      reinterpret_cast<char*>(&location_)) + sizeof(chipped_));
}

GameEvent_BotKickedBallTooFast::~GameEvent_BotKickedBallTooFast() {
  // @@protoc_insertion_point(destructor:GameEvent.BotKickedBallTooFast)
  SharedDtor();
}

void GameEvent_BotKickedBallTooFast::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotKickedBallTooFast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotKickedBallTooFast::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotKickedBallTooFast& GameEvent_BotKickedBallTooFast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotKickedBallTooFast.base);
  return *internal_default_instance();
}


void GameEvent_BotKickedBallTooFast::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotKickedBallTooFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chipped_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(chipped_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotKickedBallTooFast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotKickedBallTooFast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float initial_ball_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_initial_ball_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_ball_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chipped = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_chipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotKickedBallTooFast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotKickedBallTooFast)
  return false;
#undef DO_
}

void GameEvent_BotKickedBallTooFast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotKickedBallTooFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float initial_ball_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->initial_ball_speed(), output);
  }

  // optional bool chipped = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->chipped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotKickedBallTooFast)
}

::google::protobuf::uint8* GameEvent_BotKickedBallTooFast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotKickedBallTooFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float initial_ball_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->initial_ball_speed(), target);
  }

  // optional bool chipped = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->chipped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotKickedBallTooFast)
  return target;
}

size_t GameEvent_BotKickedBallTooFast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotKickedBallTooFast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float initial_ball_speed = 4;
    if (has_initial_ball_speed()) {
      total_size += 1 + 4;
    }

    // optional bool chipped = 5;
    if (has_chipped()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotKickedBallTooFast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotKickedBallTooFast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotKickedBallTooFast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotKickedBallTooFast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotKickedBallTooFast)
    MergeFrom(*source);
  }
}

void GameEvent_BotKickedBallTooFast::MergeFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ball_speed_ = from.initial_ball_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      chipped_ = from.chipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotKickedBallTooFast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotKickedBallTooFast::Swap(GameEvent_BotKickedBallTooFast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotKickedBallTooFast::InternalSwap(GameEvent_BotKickedBallTooFast* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(initial_ball_speed_, other->initial_ball_speed_);
  swap(chipped_, other->chipped_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotKickedBallTooFast::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotDribbledBallTooFar::InitAsDefaultInstance() {
  ::_GameEvent_BotDribbledBallTooFar_default_instance_._instance.get_mutable()->start_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  ::_GameEvent_BotDribbledBallTooFar_default_instance_._instance.get_mutable()->end_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotDribbledBallTooFar::clear_start() {
  if (start_ != NULL) start_->Clear();
  clear_has_start();
}
void GameEvent_BotDribbledBallTooFar::clear_end() {
  if (end_ != NULL) end_->Clear();
  clear_has_end();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotDribbledBallTooFar::kByTeamFieldNumber;
const int GameEvent_BotDribbledBallTooFar::kByBotFieldNumber;
const int GameEvent_BotDribbledBallTooFar::kStartFieldNumber;
const int GameEvent_BotDribbledBallTooFar::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotDribbledBallTooFar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotDribbledBallTooFar)
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(const GameEvent_BotDribbledBallTooFar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::Location(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::Location(*from.end_);
  } else {
    end_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDribbledBallTooFar)
}

void GameEvent_BotDribbledBallTooFar::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&start_)) + sizeof(by_bot_));
}

GameEvent_BotDribbledBallTooFar::~GameEvent_BotDribbledBallTooFar() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDribbledBallTooFar)
  SharedDtor();
}

void GameEvent_BotDribbledBallTooFar::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void GameEvent_BotDribbledBallTooFar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotDribbledBallTooFar::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotDribbledBallTooFar& GameEvent_BotDribbledBallTooFar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotDribbledBallTooFar.base);
  return *internal_default_instance();
}


void GameEvent_BotDribbledBallTooFar::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDribbledBallTooFar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotDribbledBallTooFar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotDribbledBallTooFar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotDribbledBallTooFar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotDribbledBallTooFar)
  return false;
#undef DO_
}

void GameEvent_BotDribbledBallTooFar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotDribbledBallTooFar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location start = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_start(), output);
  }

  // optional .Location end = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotDribbledBallTooFar)
}

::google::protobuf::uint8* GameEvent_BotDribbledBallTooFar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDribbledBallTooFar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_start(), deterministic, target);
  }

  // optional .Location end = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_end(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDribbledBallTooFar)
  return target;
}

size_t GameEvent_BotDribbledBallTooFar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDribbledBallTooFar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .Location end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotDribbledBallTooFar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotDribbledBallTooFar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotDribbledBallTooFar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotDribbledBallTooFar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotDribbledBallTooFar)
    MergeFrom(*source);
  }
}

void GameEvent_BotDribbledBallTooFar::MergeFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::Location::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::Location::MergeFrom(from.end());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotDribbledBallTooFar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_start()) {
    if (!this->start_->IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDribbledBallTooFar::Swap(GameEvent_BotDribbledBallTooFar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotDribbledBallTooFar::InternalSwap(GameEvent_BotDribbledBallTooFar* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotDribbledBallTooFar::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_AttackerTouchedOpponentInDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kByTeamFieldNumber;
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kByBotFieldNumber;
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kVictimFieldNumber;
const int GameEvent_AttackerTouchedOpponentInDefenseArea::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(const GameEvent_AttackerTouchedOpponentInDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&victim_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(victim_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&victim_) -
      reinterpret_cast<char*>(&location_)) + sizeof(victim_));
}

GameEvent_AttackerTouchedOpponentInDefenseArea::~GameEvent_AttackerTouchedOpponentInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
  SharedDtor();
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_AttackerTouchedOpponentInDefenseArea::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent_AttackerTouchedOpponentInDefenseArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea.base);
  return *internal_default_instance();
}


void GameEvent_AttackerTouchedOpponentInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&victim_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(victim_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerTouchedOpponentInDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_victim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return false;
#undef DO_
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional uint32 victim = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->victim(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
}

::google::protobuf::uint8* GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional uint32 victim = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->victim(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional uint32 victim = 4;
    if (has_victim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTouchedOpponentInDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerTouchedOpponentInDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTouchedOpponentInDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTouchedOpponentInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedOpponentInDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::Swap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(victim_, other->victim_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_AttackerTouchedOpponentInDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_AttackerDoubleTouchedBall::InitAsDefaultInstance() {
  ::_GameEvent_AttackerDoubleTouchedBall_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_AttackerDoubleTouchedBall::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerDoubleTouchedBall::kByTeamFieldNumber;
const int GameEvent_AttackerDoubleTouchedBall::kByBotFieldNumber;
const int GameEvent_AttackerDoubleTouchedBall::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerDoubleTouchedBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerDoubleTouchedBall)
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(const GameEvent_AttackerDoubleTouchedBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerDoubleTouchedBall)
}

void GameEvent_AttackerDoubleTouchedBall::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_AttackerDoubleTouchedBall::~GameEvent_AttackerDoubleTouchedBall() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerDoubleTouchedBall)
  SharedDtor();
}

void GameEvent_AttackerDoubleTouchedBall::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerDoubleTouchedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_AttackerDoubleTouchedBall::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerDoubleTouchedBall& GameEvent_AttackerDoubleTouchedBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerDoubleTouchedBall.base);
  return *internal_default_instance();
}


void GameEvent_AttackerDoubleTouchedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerDoubleTouchedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerDoubleTouchedBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerDoubleTouchedBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerDoubleTouchedBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerDoubleTouchedBall)
  return false;
#undef DO_
}

void GameEvent_AttackerDoubleTouchedBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerDoubleTouchedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerDoubleTouchedBall)
}

::google::protobuf::uint8* GameEvent_AttackerDoubleTouchedBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerDoubleTouchedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerDoubleTouchedBall)
  return target;
}

size_t GameEvent_AttackerDoubleTouchedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerDoubleTouchedBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerDoubleTouchedBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerDoubleTouchedBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerDoubleTouchedBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerDoubleTouchedBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerDoubleTouchedBall)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerDoubleTouchedBall::MergeFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerDoubleTouchedBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerDoubleTouchedBall::Swap(GameEvent_AttackerDoubleTouchedBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerDoubleTouchedBall::InternalSwap(GameEvent_AttackerDoubleTouchedBall* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_AttackerDoubleTouchedBall::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_AttackerTooCloseToDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_AttackerTooCloseToDefenseArea::kByTeamFieldNumber;
const int GameEvent_AttackerTooCloseToDefenseArea::kByBotFieldNumber;
const int GameEvent_AttackerTooCloseToDefenseArea::kLocationFieldNumber;
const int GameEvent_AttackerTooCloseToDefenseArea::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTooCloseToDefenseArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.AttackerTooCloseToDefenseArea)
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(const GameEvent_AttackerTooCloseToDefenseArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}

void GameEvent_AttackerTooCloseToDefenseArea::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_AttackerTooCloseToDefenseArea::~GameEvent_AttackerTooCloseToDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTooCloseToDefenseArea)
  SharedDtor();
}

void GameEvent_AttackerTooCloseToDefenseArea::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerTooCloseToDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_AttackerTooCloseToDefenseArea::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_AttackerTooCloseToDefenseArea& GameEvent_AttackerTooCloseToDefenseArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_AttackerTooCloseToDefenseArea.base);
  return *internal_default_instance();
}


void GameEvent_AttackerTooCloseToDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_AttackerTooCloseToDefenseArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.AttackerTooCloseToDefenseArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.AttackerTooCloseToDefenseArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.AttackerTooCloseToDefenseArea)
  return false;
#undef DO_
}

void GameEvent_AttackerTooCloseToDefenseArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.AttackerTooCloseToDefenseArea)
}

::google::protobuf::uint8* GameEvent_AttackerTooCloseToDefenseArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTooCloseToDefenseArea)
  return target;
}

size_t GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTooCloseToDefenseArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTooCloseToDefenseArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_AttackerTooCloseToDefenseArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTooCloseToDefenseArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTooCloseToDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTooCloseToDefenseArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTooCloseToDefenseArea::Swap(GameEvent_AttackerTooCloseToDefenseArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_AttackerTooCloseToDefenseArea::InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_AttackerTooCloseToDefenseArea::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotHeldBallDeliberately::InitAsDefaultInstance() {
  ::_GameEvent_BotHeldBallDeliberately_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotHeldBallDeliberately::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotHeldBallDeliberately::kByTeamFieldNumber;
const int GameEvent_BotHeldBallDeliberately::kByBotFieldNumber;
const int GameEvent_BotHeldBallDeliberately::kLocationFieldNumber;
const int GameEvent_BotHeldBallDeliberately::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotHeldBallDeliberately.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotHeldBallDeliberately)
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(const GameEvent_BotHeldBallDeliberately& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotHeldBallDeliberately)
}

void GameEvent_BotHeldBallDeliberately::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&location_)) + sizeof(duration_));
}

GameEvent_BotHeldBallDeliberately::~GameEvent_BotHeldBallDeliberately() {
  // @@protoc_insertion_point(destructor:GameEvent.BotHeldBallDeliberately)
  SharedDtor();
}

void GameEvent_BotHeldBallDeliberately::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotHeldBallDeliberately::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotHeldBallDeliberately::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotHeldBallDeliberately& GameEvent_BotHeldBallDeliberately::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotHeldBallDeliberately.base);
  return *internal_default_instance();
}


void GameEvent_BotHeldBallDeliberately::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotHeldBallDeliberately)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotHeldBallDeliberately::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotHeldBallDeliberately)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotHeldBallDeliberately)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotHeldBallDeliberately)
  return false;
#undef DO_
}

void GameEvent_BotHeldBallDeliberately::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotHeldBallDeliberately)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotHeldBallDeliberately)
}

::google::protobuf::uint8* GameEvent_BotHeldBallDeliberately::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotHeldBallDeliberately)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotHeldBallDeliberately)
  return target;
}

size_t GameEvent_BotHeldBallDeliberately::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotHeldBallDeliberately)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 by_bot = 2;
    if (has_by_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->by_bot());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotHeldBallDeliberately::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotHeldBallDeliberately* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotHeldBallDeliberately>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotHeldBallDeliberately)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotHeldBallDeliberately)
    MergeFrom(*source);
  }
}

void GameEvent_BotHeldBallDeliberately::MergeFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotHeldBallDeliberately::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotHeldBallDeliberately::Swap(GameEvent_BotHeldBallDeliberately* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotHeldBallDeliberately::InternalSwap(GameEvent_BotHeldBallDeliberately* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotHeldBallDeliberately::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotInterferedPlacement::InitAsDefaultInstance() {
  ::_GameEvent_BotInterferedPlacement_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_BotInterferedPlacement::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotInterferedPlacement::kByTeamFieldNumber;
const int GameEvent_BotInterferedPlacement::kByBotFieldNumber;
const int GameEvent_BotInterferedPlacement::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotInterferedPlacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotInterferedPlacement)
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(const GameEvent_BotInterferedPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotInterferedPlacement)
}

void GameEvent_BotInterferedPlacement::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BotInterferedPlacement::~GameEvent_BotInterferedPlacement() {
  // @@protoc_insertion_point(destructor:GameEvent.BotInterferedPlacement)
  SharedDtor();
}

void GameEvent_BotInterferedPlacement::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotInterferedPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotInterferedPlacement::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotInterferedPlacement& GameEvent_BotInterferedPlacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotInterferedPlacement.base);
  return *internal_default_instance();
}


void GameEvent_BotInterferedPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotInterferedPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotInterferedPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotInterferedPlacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 by_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_by_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &by_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotInterferedPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotInterferedPlacement)
  return false;
#undef DO_
}

void GameEvent_BotInterferedPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotInterferedPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->by_bot(), output);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotInterferedPlacement)
}

::google::protobuf::uint8* GameEvent_BotInterferedPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotInterferedPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->by_bot(), target);
  }

  // optional .Location location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotInterferedPlacement)
  return target;
}

size_t GameEvent_BotInterferedPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotInterferedPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 3;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (has_by_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->by_bot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotInterferedPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotInterferedPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotInterferedPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotInterferedPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotInterferedPlacement)
    MergeFrom(*source);
  }
}

void GameEvent_BotInterferedPlacement::MergeFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotInterferedPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotInterferedPlacement::CopyFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotInterferedPlacement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotInterferedPlacement::Swap(GameEvent_BotInterferedPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotInterferedPlacement::InternalSwap(GameEvent_BotInterferedPlacement* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(by_bot_, other->by_bot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotInterferedPlacement::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_MultipleCards::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_MultipleCards::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_MultipleCards::GameEvent_MultipleCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultipleCards.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.MultipleCards)
}
GameEvent_MultipleCards::GameEvent_MultipleCards(const GameEvent_MultipleCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleCards)
}

void GameEvent_MultipleCards::SharedCtor() {
  by_team_ = 0;
}

GameEvent_MultipleCards::~GameEvent_MultipleCards() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleCards)
  SharedDtor();
}

void GameEvent_MultipleCards::SharedDtor() {
}

void GameEvent_MultipleCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_MultipleCards::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_MultipleCards& GameEvent_MultipleCards::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultipleCards.base);
  return *internal_default_instance();
}


void GameEvent_MultipleCards::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_MultipleCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.MultipleCards)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.MultipleCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.MultipleCards)
  return false;
#undef DO_
}

void GameEvent_MultipleCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.MultipleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.MultipleCards)
}

::google::protobuf::uint8* GameEvent_MultipleCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleCards)
  return target;
}

size_t GameEvent_MultipleCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_MultipleCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultipleCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_MultipleCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultipleCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultipleCards)
    MergeFrom(*source);
  }
}

void GameEvent_MultipleCards::MergeFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_MultipleCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultipleCards::CopyFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_MultipleCards::Swap(GameEvent_MultipleCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_MultipleCards::InternalSwap(GameEvent_MultipleCards* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_MultipleCards::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_MultipleFouls::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_MultipleFouls::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_MultipleFouls::GameEvent_MultipleFouls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultipleFouls.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.MultipleFouls)
}
GameEvent_MultipleFouls::GameEvent_MultipleFouls(const GameEvent_MultipleFouls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleFouls)
}

void GameEvent_MultipleFouls::SharedCtor() {
  by_team_ = 0;
}

GameEvent_MultipleFouls::~GameEvent_MultipleFouls() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleFouls)
  SharedDtor();
}

void GameEvent_MultipleFouls::SharedDtor() {
}

void GameEvent_MultipleFouls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_MultipleFouls::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_MultipleFouls& GameEvent_MultipleFouls::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultipleFouls.base);
  return *internal_default_instance();
}


void GameEvent_MultipleFouls::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleFouls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_MultipleFouls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.MultipleFouls)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.MultipleFouls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.MultipleFouls)
  return false;
#undef DO_
}

void GameEvent_MultipleFouls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.MultipleFouls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.MultipleFouls)
}

::google::protobuf::uint8* GameEvent_MultipleFouls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleFouls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleFouls)
  return target;
}

size_t GameEvent_MultipleFouls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleFouls)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_MultipleFouls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultipleFouls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_MultipleFouls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultipleFouls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultipleFouls)
    MergeFrom(*source);
  }
}

void GameEvent_MultipleFouls::MergeFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_MultipleFouls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultipleFouls::CopyFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleFouls::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_MultipleFouls::Swap(GameEvent_MultipleFouls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_MultipleFouls::InternalSwap(GameEvent_MultipleFouls* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_MultipleFouls::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_MultiplePlacementFailures::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_MultiplePlacementFailures::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultiplePlacementFailures.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.MultiplePlacementFailures)
}
GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(const GameEvent_MultiplePlacementFailures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultiplePlacementFailures)
}

void GameEvent_MultiplePlacementFailures::SharedCtor() {
  by_team_ = 0;
}

GameEvent_MultiplePlacementFailures::~GameEvent_MultiplePlacementFailures() {
  // @@protoc_insertion_point(destructor:GameEvent.MultiplePlacementFailures)
  SharedDtor();
}

void GameEvent_MultiplePlacementFailures::SharedDtor() {
}

void GameEvent_MultiplePlacementFailures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_MultiplePlacementFailures::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_MultiplePlacementFailures& GameEvent_MultiplePlacementFailures::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_MultiplePlacementFailures.base);
  return *internal_default_instance();
}


void GameEvent_MultiplePlacementFailures::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultiplePlacementFailures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_MultiplePlacementFailures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.MultiplePlacementFailures)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.MultiplePlacementFailures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.MultiplePlacementFailures)
  return false;
#undef DO_
}

void GameEvent_MultiplePlacementFailures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.MultiplePlacementFailures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.MultiplePlacementFailures)
}

::google::protobuf::uint8* GameEvent_MultiplePlacementFailures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultiplePlacementFailures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultiplePlacementFailures)
  return target;
}

size_t GameEvent_MultiplePlacementFailures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultiplePlacementFailures)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_MultiplePlacementFailures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultiplePlacementFailures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_MultiplePlacementFailures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultiplePlacementFailures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultiplePlacementFailures)
    MergeFrom(*source);
  }
}

void GameEvent_MultiplePlacementFailures::MergeFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultiplePlacementFailures::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_MultiplePlacementFailures::Swap(GameEvent_MultiplePlacementFailures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_MultiplePlacementFailures::InternalSwap(GameEvent_MultiplePlacementFailures* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_MultiplePlacementFailures::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_KickTimeout::InitAsDefaultInstance() {
  ::_GameEvent_KickTimeout_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_KickTimeout::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_KickTimeout::kByTeamFieldNumber;
const int GameEvent_KickTimeout::kLocationFieldNumber;
const int GameEvent_KickTimeout::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_KickTimeout::GameEvent_KickTimeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_KickTimeout.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.KickTimeout)
}
GameEvent_KickTimeout::GameEvent_KickTimeout(const GameEvent_KickTimeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KickTimeout)
}

void GameEvent_KickTimeout::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&location_)) + sizeof(time_));
}

GameEvent_KickTimeout::~GameEvent_KickTimeout() {
  // @@protoc_insertion_point(destructor:GameEvent.KickTimeout)
  SharedDtor();
}

void GameEvent_KickTimeout::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_KickTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_KickTimeout::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_KickTimeout& GameEvent_KickTimeout::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_KickTimeout.base);
  return *internal_default_instance();
}


void GameEvent_KickTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KickTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_KickTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.KickTimeout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.KickTimeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.KickTimeout)
  return false;
#undef DO_
}

void GameEvent_KickTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.KickTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_location(), output);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.KickTimeout)
}

::google::protobuf::uint8* GameEvent_KickTimeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KickTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_location(), deterministic, target);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KickTimeout)
  return target;
}

size_t GameEvent_KickTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KickTimeout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 2;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional float time = 3;
  if (has_time()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_KickTimeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_KickTimeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_KickTimeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.KickTimeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.KickTimeout)
    MergeFrom(*source);
  }
}

void GameEvent_KickTimeout::MergeFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_KickTimeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_KickTimeout::CopyFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KickTimeout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KickTimeout::Swap(GameEvent_KickTimeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_KickTimeout::InternalSwap(GameEvent_KickTimeout* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_KickTimeout::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_NoProgressInGame::InitAsDefaultInstance() {
  ::_GameEvent_NoProgressInGame_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_NoProgressInGame::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_NoProgressInGame::kLocationFieldNumber;
const int GameEvent_NoProgressInGame::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_NoProgressInGame::GameEvent_NoProgressInGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_NoProgressInGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.NoProgressInGame)
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(const GameEvent_NoProgressInGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.NoProgressInGame)
}

void GameEvent_NoProgressInGame::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&location_)) + sizeof(time_));
}

GameEvent_NoProgressInGame::~GameEvent_NoProgressInGame() {
  // @@protoc_insertion_point(destructor:GameEvent.NoProgressInGame)
  SharedDtor();
}

void GameEvent_NoProgressInGame::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_NoProgressInGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_NoProgressInGame::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_NoProgressInGame& GameEvent_NoProgressInGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_NoProgressInGame.base);
  return *internal_default_instance();
}


void GameEvent_NoProgressInGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.NoProgressInGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_NoProgressInGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.NoProgressInGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Location location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.NoProgressInGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.NoProgressInGame)
  return false;
#undef DO_
}

void GameEvent_NoProgressInGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.NoProgressInGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Location location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_location(), output);
  }

  // optional float time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.NoProgressInGame)
}

::google::protobuf::uint8* GameEvent_NoProgressInGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.NoProgressInGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Location location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_location(), deterministic, target);
  }

  // optional float time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.NoProgressInGame)
  return target;
}

size_t GameEvent_NoProgressInGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.NoProgressInGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Location location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional float time = 2;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_NoProgressInGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_NoProgressInGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_NoProgressInGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.NoProgressInGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.NoProgressInGame)
    MergeFrom(*source);
  }
}

void GameEvent_NoProgressInGame::MergeFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_NoProgressInGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_NoProgressInGame::CopyFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_NoProgressInGame::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_NoProgressInGame::Swap(GameEvent_NoProgressInGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_NoProgressInGame::InternalSwap(GameEvent_NoProgressInGame* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_NoProgressInGame::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_PlacementFailed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_PlacementFailed::kByTeamFieldNumber;
const int GameEvent_PlacementFailed::kRemainingDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_PlacementFailed::GameEvent_PlacementFailed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_PlacementFailed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.PlacementFailed)
}
GameEvent_PlacementFailed::GameEvent_PlacementFailed(const GameEvent_PlacementFailed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(remaining_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementFailed)
}

void GameEvent_PlacementFailed::SharedCtor() {
  ::memset(&by_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_distance_) -
      reinterpret_cast<char*>(&by_team_)) + sizeof(remaining_distance_));
}

GameEvent_PlacementFailed::~GameEvent_PlacementFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementFailed)
  SharedDtor();
}

void GameEvent_PlacementFailed::SharedDtor() {
}

void GameEvent_PlacementFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_PlacementFailed::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_PlacementFailed& GameEvent_PlacementFailed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_PlacementFailed.base);
  return *internal_default_instance();
}


void GameEvent_PlacementFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementFailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remaining_distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(remaining_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_PlacementFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.PlacementFailed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float remaining_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_remaining_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remaining_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.PlacementFailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.PlacementFailed)
  return false;
#undef DO_
}

void GameEvent_PlacementFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.PlacementFailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional float remaining_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->remaining_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.PlacementFailed)
}

::google::protobuf::uint8* GameEvent_PlacementFailed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementFailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional float remaining_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->remaining_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementFailed)
  return target;
}

size_t GameEvent_PlacementFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementFailed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional float remaining_distance = 2;
  if (has_remaining_distance()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_PlacementFailed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PlacementFailed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_PlacementFailed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PlacementFailed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PlacementFailed)
    MergeFrom(*source);
  }
}

void GameEvent_PlacementFailed::MergeFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      remaining_distance_ = from.remaining_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PlacementFailed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PlacementFailed::CopyFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementFailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_PlacementFailed::Swap(GameEvent_PlacementFailed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_PlacementFailed::InternalSwap(GameEvent_PlacementFailed* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(remaining_distance_, other->remaining_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_PlacementFailed::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_UnsportingBehaviorMinor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_UnsportingBehaviorMinor::kByTeamFieldNumber;
const int GameEvent_UnsportingBehaviorMinor::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_UnsportingBehaviorMinor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.UnsportingBehaviorMinor)
}
GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(const GameEvent_UnsportingBehaviorMinor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMinor)
}

void GameEvent_UnsportingBehaviorMinor::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_team_ = 0;
}

GameEvent_UnsportingBehaviorMinor::~GameEvent_UnsportingBehaviorMinor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMinor)
  SharedDtor();
}

void GameEvent_UnsportingBehaviorMinor::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameEvent_UnsportingBehaviorMinor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_UnsportingBehaviorMinor::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_UnsportingBehaviorMinor& GameEvent_UnsportingBehaviorMinor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_UnsportingBehaviorMinor.base);
  return *internal_default_instance();
}


void GameEvent_UnsportingBehaviorMinor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMinor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_UnsportingBehaviorMinor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.UnsportingBehaviorMinor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameEvent.UnsportingBehaviorMinor.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.UnsportingBehaviorMinor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.UnsportingBehaviorMinor)
  return false;
#undef DO_
}

void GameEvent_UnsportingBehaviorMinor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.UnsportingBehaviorMinor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMinor.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.UnsportingBehaviorMinor)
}

::google::protobuf::uint8* GameEvent_UnsportingBehaviorMinor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMinor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMinor.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMinor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMinor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMinor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_UnsportingBehaviorMinor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_UnsportingBehaviorMinor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_UnsportingBehaviorMinor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.UnsportingBehaviorMinor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.UnsportingBehaviorMinor)
    MergeFrom(*source);
  }
}

void GameEvent_UnsportingBehaviorMinor::MergeFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMinor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMinor::Swap(GameEvent_UnsportingBehaviorMinor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_UnsportingBehaviorMinor::InternalSwap(GameEvent_UnsportingBehaviorMinor* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_UnsportingBehaviorMinor::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_UnsportingBehaviorMajor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_UnsportingBehaviorMajor::kByTeamFieldNumber;
const int GameEvent_UnsportingBehaviorMajor::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_UnsportingBehaviorMajor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.UnsportingBehaviorMajor)
}
GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(const GameEvent_UnsportingBehaviorMajor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMajor)
}

void GameEvent_UnsportingBehaviorMajor::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_team_ = 0;
}

GameEvent_UnsportingBehaviorMajor::~GameEvent_UnsportingBehaviorMajor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMajor)
  SharedDtor();
}

void GameEvent_UnsportingBehaviorMajor::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameEvent_UnsportingBehaviorMajor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_UnsportingBehaviorMajor::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_UnsportingBehaviorMajor& GameEvent_UnsportingBehaviorMajor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_UnsportingBehaviorMajor.base);
  return *internal_default_instance();
}


void GameEvent_UnsportingBehaviorMajor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMajor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_UnsportingBehaviorMajor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.UnsportingBehaviorMajor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameEvent.UnsportingBehaviorMajor.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.UnsportingBehaviorMajor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.UnsportingBehaviorMajor)
  return false;
#undef DO_
}

void GameEvent_UnsportingBehaviorMajor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.UnsportingBehaviorMajor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMajor.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.UnsportingBehaviorMajor)
}

::google::protobuf::uint8* GameEvent_UnsportingBehaviorMajor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMajor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMajor.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMajor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMajor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMajor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_UnsportingBehaviorMajor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_UnsportingBehaviorMajor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_UnsportingBehaviorMajor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.UnsportingBehaviorMajor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.UnsportingBehaviorMajor)
    MergeFrom(*source);
  }
}

void GameEvent_UnsportingBehaviorMajor::MergeFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMajor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMajor::Swap(GameEvent_UnsportingBehaviorMajor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_UnsportingBehaviorMajor::InternalSwap(GameEvent_UnsportingBehaviorMajor* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_UnsportingBehaviorMajor::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_KeeperHeldBall::InitAsDefaultInstance() {
  ::_GameEvent_KeeperHeldBall_default_instance_._instance.get_mutable()->location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}
void GameEvent_KeeperHeldBall::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_KeeperHeldBall::kByTeamFieldNumber;
const int GameEvent_KeeperHeldBall::kLocationFieldNumber;
const int GameEvent_KeeperHeldBall::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_KeeperHeldBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.KeeperHeldBall)
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(const GameEvent_KeeperHeldBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KeeperHeldBall)
}

void GameEvent_KeeperHeldBall::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&location_)) + sizeof(duration_));
}

GameEvent_KeeperHeldBall::~GameEvent_KeeperHeldBall() {
  // @@protoc_insertion_point(destructor:GameEvent.KeeperHeldBall)
  SharedDtor();
}

void GameEvent_KeeperHeldBall::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_KeeperHeldBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_KeeperHeldBall::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_KeeperHeldBall& GameEvent_KeeperHeldBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_KeeperHeldBall.base);
  return *internal_default_instance();
}


void GameEvent_KeeperHeldBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KeeperHeldBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_KeeperHeldBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.KeeperHeldBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.KeeperHeldBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.KeeperHeldBall)
  return false;
#undef DO_
}

void GameEvent_KeeperHeldBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.KeeperHeldBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_location(), output);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.KeeperHeldBall)
}

::google::protobuf::uint8* GameEvent_KeeperHeldBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KeeperHeldBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional .Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_location(), deterministic, target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KeeperHeldBall)
  return target;
}

size_t GameEvent_KeeperHeldBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KeeperHeldBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  // optional .Location location = 2;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional float duration = 3;
  if (has_duration()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_KeeperHeldBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_KeeperHeldBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_KeeperHeldBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.KeeperHeldBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.KeeperHeldBall)
    MergeFrom(*source);
  }
}

void GameEvent_KeeperHeldBall::MergeFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_KeeperHeldBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_KeeperHeldBall::CopyFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KeeperHeldBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KeeperHeldBall::Swap(GameEvent_KeeperHeldBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_KeeperHeldBall::InternalSwap(GameEvent_KeeperHeldBall* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(by_team_, other->by_team_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_KeeperHeldBall::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_PlacementSucceeded::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_PlacementSucceeded::kByTeamFieldNumber;
const int GameEvent_PlacementSucceeded::kTimeTakenFieldNumber;
const int GameEvent_PlacementSucceeded::kPrecisionFieldNumber;
const int GameEvent_PlacementSucceeded::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_PlacementSucceeded.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.PlacementSucceeded)
}
GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(const GameEvent_PlacementSucceeded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementSucceeded)
}

void GameEvent_PlacementSucceeded::SharedCtor() {
  ::memset(&by_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
}

GameEvent_PlacementSucceeded::~GameEvent_PlacementSucceeded() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementSucceeded)
  SharedDtor();
}

void GameEvent_PlacementSucceeded::SharedDtor() {
}

void GameEvent_PlacementSucceeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_PlacementSucceeded::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_PlacementSucceeded& GameEvent_PlacementSucceeded::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_PlacementSucceeded.base);
  return *internal_default_instance();
}


void GameEvent_PlacementSucceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementSucceeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_PlacementSucceeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.PlacementSucceeded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_time_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float precision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.PlacementSucceeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.PlacementSucceeded)
  return false;
#undef DO_
}

void GameEvent_PlacementSucceeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.PlacementSucceeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  // optional float time_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_taken(), output);
  }

  // optional float precision = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->precision(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.PlacementSucceeded)
}

::google::protobuf::uint8* GameEvent_PlacementSucceeded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementSucceeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  // optional float time_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_taken(), target);
  }

  // optional float precision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->precision(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementSucceeded)
  return target;
}

size_t GameEvent_PlacementSucceeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementSucceeded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional float time_taken = 2;
    if (has_time_taken()) {
      total_size += 1 + 4;
    }

    // optional float precision = 3;
    if (has_precision()) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_PlacementSucceeded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PlacementSucceeded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_PlacementSucceeded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PlacementSucceeded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PlacementSucceeded)
    MergeFrom(*source);
  }
}

void GameEvent_PlacementSucceeded::MergeFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_taken_ = from.time_taken_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PlacementSucceeded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PlacementSucceeded::CopyFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementSucceeded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_PlacementSucceeded::Swap(GameEvent_PlacementSucceeded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_PlacementSucceeded::InternalSwap(GameEvent_PlacementSucceeded* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(time_taken_, other->time_taken_);
  swap(precision_, other->precision_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_PlacementSucceeded::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_Prepared::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_Prepared::kTimeTakenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_Prepared::GameEvent_Prepared()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_Prepared.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.Prepared)
}
GameEvent_Prepared::GameEvent_Prepared(const GameEvent_Prepared& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_taken_ = from.time_taken_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.Prepared)
}

void GameEvent_Prepared::SharedCtor() {
  time_taken_ = 0;
}

GameEvent_Prepared::~GameEvent_Prepared() {
  // @@protoc_insertion_point(destructor:GameEvent.Prepared)
  SharedDtor();
}

void GameEvent_Prepared::SharedDtor() {
}

void GameEvent_Prepared::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_Prepared::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_Prepared& GameEvent_Prepared::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_Prepared.base);
  return *internal_default_instance();
}


void GameEvent_Prepared::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Prepared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_taken_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_Prepared::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.Prepared)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time_taken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_time_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.Prepared)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.Prepared)
  return false;
#undef DO_
}

void GameEvent_Prepared::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.Prepared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_taken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_taken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.Prepared)
}

::google::protobuf::uint8* GameEvent_Prepared::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Prepared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_taken = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_taken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Prepared)
  return target;
}

size_t GameEvent_Prepared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Prepared)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float time_taken = 1;
  if (has_time_taken()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_Prepared::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_Prepared* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_Prepared>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.Prepared)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.Prepared)
    MergeFrom(*source);
  }
}

void GameEvent_Prepared::MergeFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_taken()) {
    set_time_taken(from.time_taken());
  }
}

void GameEvent_Prepared::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_Prepared::CopyFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Prepared::IsInitialized() const {
  return true;
}

void GameEvent_Prepared::Swap(GameEvent_Prepared* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_Prepared::InternalSwap(GameEvent_Prepared* other) {
  using std::swap;
  swap(time_taken_, other->time_taken_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_Prepared::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_BotSubstitution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_BotSubstitution::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_BotSubstitution::GameEvent_BotSubstitution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotSubstitution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.BotSubstitution)
}
GameEvent_BotSubstitution::GameEvent_BotSubstitution(const GameEvent_BotSubstitution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotSubstitution)
}

void GameEvent_BotSubstitution::SharedCtor() {
  by_team_ = 0;
}

GameEvent_BotSubstitution::~GameEvent_BotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.BotSubstitution)
  SharedDtor();
}

void GameEvent_BotSubstitution::SharedDtor() {
}

void GameEvent_BotSubstitution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_BotSubstitution::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_BotSubstitution& GameEvent_BotSubstitution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_BotSubstitution.base);
  return *internal_default_instance();
}


void GameEvent_BotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotSubstitution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_BotSubstitution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.BotSubstitution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.BotSubstitution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.BotSubstitution)
  return false;
#undef DO_
}

void GameEvent_BotSubstitution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.BotSubstitution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.BotSubstitution)
}

::google::protobuf::uint8* GameEvent_BotSubstitution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotSubstitution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotSubstitution)
  return target;
}

size_t GameEvent_BotSubstitution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotSubstitution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotSubstitution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotSubstitution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_BotSubstitution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotSubstitution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotSubstitution)
    MergeFrom(*source);
  }
}

void GameEvent_BotSubstitution::MergeFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_BotSubstitution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotSubstitution::CopyFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotSubstitution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_BotSubstitution::Swap(GameEvent_BotSubstitution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_BotSubstitution::InternalSwap(GameEvent_BotSubstitution* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_BotSubstitution::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent_TooManyRobots::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent_TooManyRobots::kByTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent_TooManyRobots::GameEvent_TooManyRobots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_TooManyRobots.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent.TooManyRobots)
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(const GameEvent_TooManyRobots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.TooManyRobots)
}

void GameEvent_TooManyRobots::SharedCtor() {
  by_team_ = 0;
}

GameEvent_TooManyRobots::~GameEvent_TooManyRobots() {
  // @@protoc_insertion_point(destructor:GameEvent.TooManyRobots)
  SharedDtor();
}

void GameEvent_TooManyRobots::SharedDtor() {
}

void GameEvent_TooManyRobots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent_TooManyRobots::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent_TooManyRobots& GameEvent_TooManyRobots::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent_TooManyRobots.base);
  return *internal_default_instance();
}


void GameEvent_TooManyRobots::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.TooManyRobots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent_TooManyRobots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent.TooManyRobots)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team by_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_by_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent.TooManyRobots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent.TooManyRobots)
  return false;
#undef DO_
}

void GameEvent_TooManyRobots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent.TooManyRobots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->by_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent.TooManyRobots)
}

::google::protobuf::uint8* GameEvent_TooManyRobots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.TooManyRobots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->by_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.TooManyRobots)
  return target;
}

size_t GameEvent_TooManyRobots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.TooManyRobots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team by_team = 1;
  if (has_by_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->by_team());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_TooManyRobots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_TooManyRobots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent_TooManyRobots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.TooManyRobots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.TooManyRobots)
    MergeFrom(*source);
  }
}

void GameEvent_TooManyRobots::MergeFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_by_team()) {
    set_by_team(from.by_team());
  }
}

void GameEvent_TooManyRobots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_TooManyRobots::CopyFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_TooManyRobots::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameEvent_TooManyRobots::Swap(GameEvent_TooManyRobots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent_TooManyRobots::InternalSwap(GameEvent_TooManyRobots* other) {
  using std::swap;
  swap(by_team_, other->by_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent_TooManyRobots::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameEvent::InitAsDefaultInstance() {
  ::_GameEvent_default_instance_.prepared_ = const_cast< ::GameEvent_Prepared*>(
      ::GameEvent_Prepared::internal_default_instance());
  ::_GameEvent_default_instance_.no_progress_in_game_ = const_cast< ::GameEvent_NoProgressInGame*>(
      ::GameEvent_NoProgressInGame::internal_default_instance());
  ::_GameEvent_default_instance_.placement_failed_ = const_cast< ::GameEvent_PlacementFailed*>(
      ::GameEvent_PlacementFailed::internal_default_instance());
  ::_GameEvent_default_instance_.placement_succeeded_ = const_cast< ::GameEvent_PlacementSucceeded*>(
      ::GameEvent_PlacementSucceeded::internal_default_instance());
  ::_GameEvent_default_instance_.bot_substitution_ = const_cast< ::GameEvent_BotSubstitution*>(
      ::GameEvent_BotSubstitution::internal_default_instance());
  ::_GameEvent_default_instance_.too_many_robots_ = const_cast< ::GameEvent_TooManyRobots*>(
      ::GameEvent_TooManyRobots::internal_default_instance());
  ::_GameEvent_default_instance_.ball_left_field_touch_line_ = const_cast< ::GameEvent_BallLeftField*>(
      ::GameEvent_BallLeftField::internal_default_instance());
  ::_GameEvent_default_instance_.ball_left_field_goal_line_ = const_cast< ::GameEvent_BallLeftField*>(
      ::GameEvent_BallLeftField::internal_default_instance());
  ::_GameEvent_default_instance_.possible_goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  ::_GameEvent_default_instance_.goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  ::_GameEvent_default_instance_.indirect_goal_ = const_cast< ::GameEvent_IndirectGoal*>(
      ::GameEvent_IndirectGoal::internal_default_instance());
  ::_GameEvent_default_instance_.chipped_goal_ = const_cast< ::GameEvent_ChippedGoal*>(
      ::GameEvent_ChippedGoal::internal_default_instance());
  ::_GameEvent_default_instance_.aimless_kick_ = const_cast< ::GameEvent_AimlessKick*>(
      ::GameEvent_AimlessKick::internal_default_instance());
  ::_GameEvent_default_instance_.kick_timeout_ = const_cast< ::GameEvent_KickTimeout*>(
      ::GameEvent_KickTimeout::internal_default_instance());
  ::_GameEvent_default_instance_.keeper_held_ball_ = const_cast< ::GameEvent_KeeperHeldBall*>(
      ::GameEvent_KeeperHeldBall::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_double_touched_ball_ = const_cast< ::GameEvent_AttackerDoubleTouchedBall*>(
      ::GameEvent_AttackerDoubleTouchedBall::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_touched_ball_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedBallInDefenseArea*>(
      ::GameEvent_AttackerTouchedBallInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_touched_opponent_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_touched_opponent_in_defense_area_skipped_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.bot_dribbled_ball_too_far_ = const_cast< ::GameEvent_BotDribbledBallTooFar*>(
      ::GameEvent_BotDribbledBallTooFar::internal_default_instance());
  ::_GameEvent_default_instance_.bot_kicked_ball_too_fast_ = const_cast< ::GameEvent_BotKickedBallTooFast*>(
      ::GameEvent_BotKickedBallTooFast::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_too_close_to_defense_area_ = const_cast< ::GameEvent_AttackerTooCloseToDefenseArea*>(
      ::GameEvent_AttackerTooCloseToDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.bot_interfered_placement_ = const_cast< ::GameEvent_BotInterferedPlacement*>(
      ::GameEvent_BotInterferedPlacement::internal_default_instance());
  ::_GameEvent_default_instance_.bot_crash_drawn_ = const_cast< ::GameEvent_BotCrashDrawn*>(
      ::GameEvent_BotCrashDrawn::internal_default_instance());
  ::_GameEvent_default_instance_.bot_crash_unique_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  ::_GameEvent_default_instance_.bot_crash_unique_skipped_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  ::_GameEvent_default_instance_.bot_pushed_bot_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  ::_GameEvent_default_instance_.bot_pushed_bot_skipped_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  ::_GameEvent_default_instance_.bot_held_ball_deliberately_ = const_cast< ::GameEvent_BotHeldBallDeliberately*>(
      ::GameEvent_BotHeldBallDeliberately::internal_default_instance());
  ::_GameEvent_default_instance_.bot_tipped_over_ = const_cast< ::GameEvent_BotTippedOver*>(
      ::GameEvent_BotTippedOver::internal_default_instance());
  ::_GameEvent_default_instance_.bot_too_fast_in_stop_ = const_cast< ::GameEvent_BotTooFastInStop*>(
      ::GameEvent_BotTooFastInStop::internal_default_instance());
  ::_GameEvent_default_instance_.defender_too_close_to_kick_point_ = const_cast< ::GameEvent_DefenderTooCloseToKickPoint*>(
      ::GameEvent_DefenderTooCloseToKickPoint::internal_default_instance());
  ::_GameEvent_default_instance_.defender_in_defense_area_partially_ = const_cast< ::GameEvent_DefenderInDefenseAreaPartially*>(
      ::GameEvent_DefenderInDefenseAreaPartially::internal_default_instance());
  ::_GameEvent_default_instance_.defender_in_defense_area_ = const_cast< ::GameEvent_DefenderInDefenseArea*>(
      ::GameEvent_DefenderInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.multiple_cards_ = const_cast< ::GameEvent_MultipleCards*>(
      ::GameEvent_MultipleCards::internal_default_instance());
  ::_GameEvent_default_instance_.multiple_placement_failures_ = const_cast< ::GameEvent_MultiplePlacementFailures*>(
      ::GameEvent_MultiplePlacementFailures::internal_default_instance());
  ::_GameEvent_default_instance_.multiple_fouls_ = const_cast< ::GameEvent_MultipleFouls*>(
      ::GameEvent_MultipleFouls::internal_default_instance());
  ::_GameEvent_default_instance_.unsporting_behavior_minor_ = const_cast< ::GameEvent_UnsportingBehaviorMinor*>(
      ::GameEvent_UnsportingBehaviorMinor::internal_default_instance());
  ::_GameEvent_default_instance_.unsporting_behavior_major_ = const_cast< ::GameEvent_UnsportingBehaviorMajor*>(
      ::GameEvent_UnsportingBehaviorMajor::internal_default_instance());
}
void GameEvent::set_allocated_prepared(::GameEvent_Prepared* prepared) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (prepared) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prepared = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prepared, submessage_arena);
    }
    set_has_prepared();
    event_.prepared_ = prepared;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.prepared)
}
void GameEvent::set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* no_progress_in_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (no_progress_in_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      no_progress_in_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, no_progress_in_game, submessage_arena);
    }
    set_has_no_progress_in_game();
    event_.no_progress_in_game_ = no_progress_in_game;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.no_progress_in_game)
}
void GameEvent::set_allocated_placement_failed(::GameEvent_PlacementFailed* placement_failed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (placement_failed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      placement_failed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, placement_failed, submessage_arena);
    }
    set_has_placement_failed();
    event_.placement_failed_ = placement_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_failed)
}
void GameEvent::set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* placement_succeeded) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (placement_succeeded) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      placement_succeeded = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, placement_succeeded, submessage_arena);
    }
    set_has_placement_succeeded();
    event_.placement_succeeded_ = placement_succeeded;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_succeeded)
}
void GameEvent::set_allocated_bot_substitution(::GameEvent_BotSubstitution* bot_substitution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_substitution) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_substitution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_substitution, submessage_arena);
    }
    set_has_bot_substitution();
    event_.bot_substitution_ = bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_substitution)
}
void GameEvent::set_allocated_too_many_robots(::GameEvent_TooManyRobots* too_many_robots) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (too_many_robots) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      too_many_robots = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, too_many_robots, submessage_arena);
    }
    set_has_too_many_robots();
    event_.too_many_robots_ = too_many_robots;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.too_many_robots)
}
void GameEvent::set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* ball_left_field_touch_line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ball_left_field_touch_line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball_left_field_touch_line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball_left_field_touch_line, submessage_arena);
    }
    set_has_ball_left_field_touch_line();
    event_.ball_left_field_touch_line_ = ball_left_field_touch_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_touch_line)
}
void GameEvent::set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* ball_left_field_goal_line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ball_left_field_goal_line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball_left_field_goal_line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball_left_field_goal_line, submessage_arena);
    }
    set_has_ball_left_field_goal_line();
    event_.ball_left_field_goal_line_ = ball_left_field_goal_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_goal_line)
}
void GameEvent::set_allocated_possible_goal(::GameEvent_Goal* possible_goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (possible_goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      possible_goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, possible_goal, submessage_arena);
    }
    set_has_possible_goal();
    event_.possible_goal_ = possible_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.possible_goal)
}
void GameEvent::set_allocated_goal(::GameEvent_Goal* goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    set_has_goal();
    event_.goal_ = goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.goal)
}
void GameEvent::set_allocated_indirect_goal(::GameEvent_IndirectGoal* indirect_goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (indirect_goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      indirect_goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indirect_goal, submessage_arena);
    }
    set_has_indirect_goal();
    event_.indirect_goal_ = indirect_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.indirect_goal)
}
void GameEvent::set_allocated_chipped_goal(::GameEvent_ChippedGoal* chipped_goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (chipped_goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chipped_goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chipped_goal, submessage_arena);
    }
    set_has_chipped_goal();
    event_.chipped_goal_ = chipped_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.chipped_goal)
}
void GameEvent::set_allocated_aimless_kick(::GameEvent_AimlessKick* aimless_kick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (aimless_kick) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aimless_kick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aimless_kick, submessage_arena);
    }
    set_has_aimless_kick();
    event_.aimless_kick_ = aimless_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.aimless_kick)
}
void GameEvent::set_allocated_kick_timeout(::GameEvent_KickTimeout* kick_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kick_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kick_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kick_timeout, submessage_arena);
    }
    set_has_kick_timeout();
    event_.kick_timeout_ = kick_timeout;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.kick_timeout)
}
void GameEvent::set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* keeper_held_ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (keeper_held_ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      keeper_held_ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, keeper_held_ball, submessage_arena);
    }
    set_has_keeper_held_ball();
    event_.keeper_held_ball_ = keeper_held_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.keeper_held_ball)
}
void GameEvent::set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (attacker_double_touched_ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attacker_double_touched_ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attacker_double_touched_ball, submessage_arena);
    }
    set_has_attacker_double_touched_ball();
    event_.attacker_double_touched_ball_ = attacker_double_touched_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_double_touched_ball)
}
void GameEvent::set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (attacker_touched_ball_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attacker_touched_ball_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attacker_touched_ball_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_ball_in_defense_area();
    event_.attacker_touched_ball_in_defense_area_ = attacker_touched_ball_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_ball_in_defense_area)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (attacker_touched_opponent_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area();
    event_.attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (attacker_touched_opponent_in_defense_area_skipped) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area_skipped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area_skipped, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    event_.attacker_touched_opponent_in_defense_area_skipped_ = attacker_touched_opponent_in_defense_area_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
}
void GameEvent::set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_dribbled_ball_too_far) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_dribbled_ball_too_far = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_dribbled_ball_too_far, submessage_arena);
    }
    set_has_bot_dribbled_ball_too_far();
    event_.bot_dribbled_ball_too_far_ = bot_dribbled_ball_too_far;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dribbled_ball_too_far)
}
void GameEvent::set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_kicked_ball_too_fast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_kicked_ball_too_fast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_kicked_ball_too_fast, submessage_arena);
    }
    set_has_bot_kicked_ball_too_fast();
    event_.bot_kicked_ball_too_fast_ = bot_kicked_ball_too_fast;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_kicked_ball_too_fast)
}
void GameEvent::set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (attacker_too_close_to_defense_area) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attacker_too_close_to_defense_area = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attacker_too_close_to_defense_area, submessage_arena);
    }
    set_has_attacker_too_close_to_defense_area();
    event_.attacker_too_close_to_defense_area_ = attacker_too_close_to_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_too_close_to_defense_area)
}
void GameEvent::set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* bot_interfered_placement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_interfered_placement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_interfered_placement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_interfered_placement, submessage_arena);
    }
    set_has_bot_interfered_placement();
    event_.bot_interfered_placement_ = bot_interfered_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_interfered_placement)
}
void GameEvent::set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* bot_crash_drawn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_crash_drawn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_crash_drawn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_crash_drawn, submessage_arena);
    }
    set_has_bot_crash_drawn();
    event_.bot_crash_drawn_ = bot_crash_drawn;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_drawn)
}
void GameEvent::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_crash_unique) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_crash_unique = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_crash_unique, submessage_arena);
    }
    set_has_bot_crash_unique();
    event_.bot_crash_unique_ = bot_crash_unique;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique)
}
void GameEvent::set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* bot_crash_unique_skipped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_crash_unique_skipped) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_crash_unique_skipped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_crash_unique_skipped, submessage_arena);
    }
    set_has_bot_crash_unique_skipped();
    event_.bot_crash_unique_skipped_ = bot_crash_unique_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique_skipped)
}
void GameEvent::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_pushed_bot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_pushed_bot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot, submessage_arena);
    }
    set_has_bot_pushed_bot();
    event_.bot_pushed_bot_ = bot_pushed_bot;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot)
}
void GameEvent::set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* bot_pushed_bot_skipped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_pushed_bot_skipped) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_pushed_bot_skipped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot_skipped, submessage_arena);
    }
    set_has_bot_pushed_bot_skipped();
    event_.bot_pushed_bot_skipped_ = bot_pushed_bot_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot_skipped)
}
void GameEvent::set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_held_ball_deliberately) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_held_ball_deliberately = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_held_ball_deliberately, submessage_arena);
    }
    set_has_bot_held_ball_deliberately();
    event_.bot_held_ball_deliberately_ = bot_held_ball_deliberately;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_held_ball_deliberately)
}
void GameEvent::set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* bot_tipped_over) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_tipped_over) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_tipped_over = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_tipped_over, submessage_arena);
    }
    set_has_bot_tipped_over();
    event_.bot_tipped_over_ = bot_tipped_over;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_tipped_over)
}
void GameEvent::set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* bot_too_fast_in_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (bot_too_fast_in_stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_too_fast_in_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_too_fast_in_stop, submessage_arena);
    }
    set_has_bot_too_fast_in_stop();
    event_.bot_too_fast_in_stop_ = bot_too_fast_in_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_too_fast_in_stop)
}
void GameEvent::set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (defender_too_close_to_kick_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      defender_too_close_to_kick_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, defender_too_close_to_kick_point, submessage_arena);
    }
    set_has_defender_too_close_to_kick_point();
    event_.defender_too_close_to_kick_point_ = defender_too_close_to_kick_point;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_too_close_to_kick_point)
}
void GameEvent::set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (defender_in_defense_area_partially) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      defender_in_defense_area_partially = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, defender_in_defense_area_partially, submessage_arena);
    }
    set_has_defender_in_defense_area_partially();
    event_.defender_in_defense_area_partially_ = defender_in_defense_area_partially;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area_partially)
}
void GameEvent::set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* defender_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (defender_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      defender_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, defender_in_defense_area, submessage_arena);
    }
    set_has_defender_in_defense_area();
    event_.defender_in_defense_area_ = defender_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area)
}
void GameEvent::set_allocated_multiple_cards(::GameEvent_MultipleCards* multiple_cards) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (multiple_cards) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multiple_cards = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multiple_cards, submessage_arena);
    }
    set_has_multiple_cards();
    event_.multiple_cards_ = multiple_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_cards)
}
void GameEvent::set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* multiple_placement_failures) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (multiple_placement_failures) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multiple_placement_failures = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multiple_placement_failures, submessage_arena);
    }
    set_has_multiple_placement_failures();
    event_.multiple_placement_failures_ = multiple_placement_failures;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_placement_failures)
}
void GameEvent::set_allocated_multiple_fouls(::GameEvent_MultipleFouls* multiple_fouls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (multiple_fouls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multiple_fouls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multiple_fouls, submessage_arena);
    }
    set_has_multiple_fouls();
    event_.multiple_fouls_ = multiple_fouls;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_fouls)
}
void GameEvent::set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (unsporting_behavior_minor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unsporting_behavior_minor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unsporting_behavior_minor, submessage_arena);
    }
    set_has_unsporting_behavior_minor();
    event_.unsporting_behavior_minor_ = unsporting_behavior_minor;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_minor)
}
void GameEvent::set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (unsporting_behavior_major) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unsporting_behavior_major = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unsporting_behavior_major, submessage_arena);
    }
    set_has_unsporting_behavior_major();
    event_.unsporting_behavior_major_ = unsporting_behavior_major;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_major)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameEvent::kTypeFieldNumber;
const int GameEvent::kOriginFieldNumber;
const int GameEvent::kPreparedFieldNumber;
const int GameEvent::kNoProgressInGameFieldNumber;
const int GameEvent::kPlacementFailedFieldNumber;
const int GameEvent::kPlacementSucceededFieldNumber;
const int GameEvent::kBotSubstitutionFieldNumber;
const int GameEvent::kTooManyRobotsFieldNumber;
const int GameEvent::kBallLeftFieldTouchLineFieldNumber;
const int GameEvent::kBallLeftFieldGoalLineFieldNumber;
const int GameEvent::kPossibleGoalFieldNumber;
const int GameEvent::kGoalFieldNumber;
const int GameEvent::kIndirectGoalFieldNumber;
const int GameEvent::kChippedGoalFieldNumber;
const int GameEvent::kAimlessKickFieldNumber;
const int GameEvent::kKickTimeoutFieldNumber;
const int GameEvent::kKeeperHeldBallFieldNumber;
const int GameEvent::kAttackerDoubleTouchedBallFieldNumber;
const int GameEvent::kAttackerTouchedBallInDefenseAreaFieldNumber;
const int GameEvent::kAttackerTouchedOpponentInDefenseAreaFieldNumber;
const int GameEvent::kAttackerTouchedOpponentInDefenseAreaSkippedFieldNumber;
const int GameEvent::kBotDribbledBallTooFarFieldNumber;
const int GameEvent::kBotKickedBallTooFastFieldNumber;
const int GameEvent::kAttackerTooCloseToDefenseAreaFieldNumber;
const int GameEvent::kBotInterferedPlacementFieldNumber;
const int GameEvent::kBotCrashDrawnFieldNumber;
const int GameEvent::kBotCrashUniqueFieldNumber;
const int GameEvent::kBotCrashUniqueSkippedFieldNumber;
const int GameEvent::kBotPushedBotFieldNumber;
const int GameEvent::kBotPushedBotSkippedFieldNumber;
const int GameEvent::kBotHeldBallDeliberatelyFieldNumber;
const int GameEvent::kBotTippedOverFieldNumber;
const int GameEvent::kBotTooFastInStopFieldNumber;
const int GameEvent::kDefenderTooCloseToKickPointFieldNumber;
const int GameEvent::kDefenderInDefenseAreaPartiallyFieldNumber;
const int GameEvent::kDefenderInDefenseAreaFieldNumber;
const int GameEvent::kMultipleCardsFieldNumber;
const int GameEvent::kMultiplePlacementFailuresFieldNumber;
const int GameEvent::kMultipleFoulsFieldNumber;
const int GameEvent::kUnsportingBehaviorMinorFieldNumber;
const int GameEvent::kUnsportingBehaviorMajorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameEvent::GameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEvent)
}
GameEvent::GameEvent(const GameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      origin_(from.origin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_event();
  switch (from.event_case()) {
    case kPrepared: {
      mutable_prepared()->::GameEvent_Prepared::MergeFrom(from.prepared());
      break;
    }
    case kNoProgressInGame: {
      mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(from.no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(from.placement_failed());
      break;
    }
    case kPlacementSucceeded: {
      mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(from.placement_succeeded());
      break;
    }
    case kBotSubstitution: {
      mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(from.bot_substitution());
      break;
    }
    case kTooManyRobots: {
      mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(from.too_many_robots());
      break;
    }
    case kBallLeftFieldTouchLine: {
      mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_goal_line());
      break;
    }
    case kPossibleGoal: {
      mutable_possible_goal()->::GameEvent_Goal::MergeFrom(from.possible_goal());
      break;
    }
    case kGoal: {
      mutable_goal()->::GameEvent_Goal::MergeFrom(from.goal());
      break;
    }
    case kIndirectGoal: {
      mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(from.indirect_goal());
      break;
    }
    case kChippedGoal: {
      mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(from.chipped_goal());
      break;
    }
    case kAimlessKick: {
      mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(from.aimless_kick());
      break;
    }
    case kKickTimeout: {
      mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(from.kick_timeout());
      break;
    }
    case kKeeperHeldBall: {
      mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(from.keeper_held_ball());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(from.attacker_double_touched_ball());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(from.attacker_touched_ball_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotDribbledBallTooFar: {
      mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(from.bot_dribbled_ball_too_far());
      break;
    }
    case kBotKickedBallTooFast: {
      mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(from.bot_kicked_ball_too_fast());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(from.attacker_too_close_to_defense_area());
      break;
    }
    case kBotInterferedPlacement: {
      mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(from.bot_interfered_placement());
      break;
    }
    case kBotCrashDrawn: {
      mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(from.bot_crash_drawn());
      break;
    }
    case kBotCrashUnique: {
      mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique());
      break;
    }
    case kBotCrashUniqueSkipped: {
      mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBot: {
      mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot());
      break;
    }
    case kBotPushedBotSkipped: {
      mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot_skipped());
      break;
    }
    case kBotHeldBallDeliberately: {
      mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(from.bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(from.bot_tipped_over());
      break;
    }
    case kBotTooFastInStop: {
      mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(from.bot_too_fast_in_stop());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(from.defender_too_close_to_kick_point());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(from.defender_in_defense_area_partially());
      break;
    }
    case kDefenderInDefenseArea: {
      mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(from.defender_in_defense_area());
      break;
    }
    case kMultipleCards: {
      mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(from.multiple_cards());
      break;
    }
    case kMultiplePlacementFailures: {
      mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(from.multiple_placement_failures());
      break;
    }
    case kMultipleFouls: {
      mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(from.multiple_fouls());
      break;
    }
    case kUnsportingBehaviorMinor: {
      mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(from.unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(from.unsporting_behavior_major());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameEvent)
}

void GameEvent::SharedCtor() {
  type_ = 0;
  clear_has_event();
}

GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:GameEvent)
  SharedDtor();
}

void GameEvent::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void GameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameEvent::descriptor() {
  ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameEvent& GameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgame_5fevent_5f2019_2eproto::scc_info_GameEvent.base);
  return *internal_default_instance();
}


void GameEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:GameEvent)
  switch (event_case()) {
    case kPrepared: {
      delete event_.prepared_;
      break;
    }
    case kNoProgressInGame: {
      delete event_.no_progress_in_game_;
      break;
    }
    case kPlacementFailed: {
      delete event_.placement_failed_;
      break;
    }
    case kPlacementSucceeded: {
      delete event_.placement_succeeded_;
      break;
    }
    case kBotSubstitution: {
      delete event_.bot_substitution_;
      break;
    }
    case kTooManyRobots: {
      delete event_.too_many_robots_;
      break;
    }
    case kBallLeftFieldTouchLine: {
      delete event_.ball_left_field_touch_line_;
      break;
    }
    case kBallLeftFieldGoalLine: {
      delete event_.ball_left_field_goal_line_;
      break;
    }
    case kPossibleGoal: {
      delete event_.possible_goal_;
      break;
    }
    case kGoal: {
      delete event_.goal_;
      break;
    }
    case kIndirectGoal: {
      delete event_.indirect_goal_;
      break;
    }
    case kChippedGoal: {
      delete event_.chipped_goal_;
      break;
    }
    case kAimlessKick: {
      delete event_.aimless_kick_;
      break;
    }
    case kKickTimeout: {
      delete event_.kick_timeout_;
      break;
    }
    case kKeeperHeldBall: {
      delete event_.keeper_held_ball_;
      break;
    }
    case kAttackerDoubleTouchedBall: {
      delete event_.attacker_double_touched_ball_;
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      delete event_.attacker_touched_ball_in_defense_area_;
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      delete event_.attacker_touched_opponent_in_defense_area_;
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      delete event_.attacker_touched_opponent_in_defense_area_skipped_;
      break;
    }
    case kBotDribbledBallTooFar: {
      delete event_.bot_dribbled_ball_too_far_;
      break;
    }
    case kBotKickedBallTooFast: {
      delete event_.bot_kicked_ball_too_fast_;
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      delete event_.attacker_too_close_to_defense_area_;
      break;
    }
    case kBotInterferedPlacement: {
      delete event_.bot_interfered_placement_;
      break;
    }
    case kBotCrashDrawn: {
      delete event_.bot_crash_drawn_;
      break;
    }
    case kBotCrashUnique: {
      delete event_.bot_crash_unique_;
      break;
    }
    case kBotCrashUniqueSkipped: {
      delete event_.bot_crash_unique_skipped_;
      break;
    }
    case kBotPushedBot: {
      delete event_.bot_pushed_bot_;
      break;
    }
    case kBotPushedBotSkipped: {
      delete event_.bot_pushed_bot_skipped_;
      break;
    }
    case kBotHeldBallDeliberately: {
      delete event_.bot_held_ball_deliberately_;
      break;
    }
    case kBotTippedOver: {
      delete event_.bot_tipped_over_;
      break;
    }
    case kBotTooFastInStop: {
      delete event_.bot_too_fast_in_stop_;
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      delete event_.defender_too_close_to_kick_point_;
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      delete event_.defender_in_defense_area_partially_;
      break;
    }
    case kDefenderInDefenseArea: {
      delete event_.defender_in_defense_area_;
      break;
    }
    case kMultipleCards: {
      delete event_.multiple_cards_;
      break;
    }
    case kMultiplePlacementFailures: {
      delete event_.multiple_placement_failures_;
      break;
    }
    case kMultipleFouls: {
      delete event_.multiple_fouls_;
      break;
    }
    case kUnsportingBehaviorMinor: {
      delete event_.unsporting_behavior_minor_;
      break;
    }
    case kUnsportingBehaviorMajor: {
      delete event_.unsporting_behavior_major_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_.Clear();
  type_ = 0;
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameEvent.Prepared prepared = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prepared()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.NoProgressInGame no_progress_in_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_no_progress_in_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.PlacementFailed placement_failed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_placement_failed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.PlacementSucceeded placement_succeeded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_placement_succeeded()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BallLeftField ball_left_field_touch_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball_left_field_touch_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BallLeftField ball_left_field_goal_line = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball_left_field_goal_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.Goal goal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.IndirectGoal indirect_goal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indirect_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.ChippedGoal chipped_goal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chipped_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AimlessKick aimless_kick = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aimless_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.KickTimeout kick_timeout = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.KeeperHeldBall keeper_held_ball = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_keeper_held_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attacker_double_touched_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attacker_touched_ball_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attacker_touched_opponent_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_dribbled_ball_too_far()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_kicked_ball_too_fast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attacker_too_close_to_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_interfered_placement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_crash_drawn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotCrashUnique bot_crash_unique = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_crash_unique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_crash_unique_skipped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotPushedBot bot_pushed_bot = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_pushed_bot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_pushed_bot_skipped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_held_ball_deliberately()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotTippedOver bot_tipped_over = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_tipped_over()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_too_fast_in_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_defender_too_close_to_kick_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_defender_in_defense_area_partially()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_defender_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.MultipleCards multiple_cards = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multiple_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multiple_placement_failures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.MultipleFouls multiple_fouls = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multiple_fouls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unsporting_behavior_minor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unsporting_behavior_major()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.BotSubstitution bot_substitution = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_substitution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.TooManyRobots too_many_robots = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_too_many_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.Goal possible_goal = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_possible_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GameEventType type = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameEventType_IsValid(value)) {
            set_type(static_cast< ::GameEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string origin = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin(this->origin_size() - 1).data(),
            static_cast<int>(this->origin(this->origin_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameEvent.origin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attacker_touched_opponent_in_defense_area_skipped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEvent)
  return false;
#undef DO_
}

void GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kPrepared:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_prepared(), output);
      break;
    case kNoProgressInGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_no_progress_in_game(), output);
      break;
    case kPlacementFailed:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_placement_failed(), output);
      break;
    case kPlacementSucceeded:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_placement_succeeded(), output);
      break;
    case kBallLeftFieldTouchLine:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_ball_left_field_touch_line(), output);
      break;
    case kBallLeftFieldGoalLine:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_ball_left_field_goal_line(), output);
      break;
    case kGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_goal(), output);
      break;
    case kIndirectGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_indirect_goal(), output);
      break;
    case kChippedGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_chipped_goal(), output);
      break;
    case kAimlessKick:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_aimless_kick(), output);
      break;
    case kKickTimeout:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_kick_timeout(), output);
      break;
    case kKeeperHeldBall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_keeper_held_ball(), output);
      break;
    case kAttackerDoubleTouchedBall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_attacker_double_touched_ball(), output);
      break;
    case kAttackerTouchedBallInDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_attacker_touched_ball_in_defense_area(), output);
      break;
    case kAttackerTouchedOpponentInDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, this->_internal_attacker_touched_opponent_in_defense_area(), output);
      break;
    case kBotDribbledBallTooFar:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_bot_dribbled_ball_too_far(), output);
      break;
    case kBotKickedBallTooFast:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_bot_kicked_ball_too_fast(), output);
      break;
    case kAttackerTooCloseToDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_attacker_too_close_to_defense_area(), output);
      break;
    case kBotInterferedPlacement:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, this->_internal_bot_interfered_placement(), output);
      break;
    case kBotCrashDrawn:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, this->_internal_bot_crash_drawn(), output);
      break;
    case kBotCrashUnique:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, this->_internal_bot_crash_unique(), output);
      break;
    case kBotCrashUniqueSkipped:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, this->_internal_bot_crash_unique_skipped(), output);
      break;
    case kBotPushedBot:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, this->_internal_bot_pushed_bot(), output);
      break;
    case kBotPushedBotSkipped:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, this->_internal_bot_pushed_bot_skipped(), output);
      break;
    case kBotHeldBallDeliberately:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, this->_internal_bot_held_ball_deliberately(), output);
      break;
    case kBotTippedOver:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, this->_internal_bot_tipped_over(), output);
      break;
    case kBotTooFastInStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, this->_internal_bot_too_fast_in_stop(), output);
      break;
    case kDefenderTooCloseToKickPoint:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, this->_internal_defender_too_close_to_kick_point(), output);
      break;
    case kDefenderInDefenseAreaPartially:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, this->_internal_defender_in_defense_area_partially(), output);
      break;
    case kDefenderInDefenseArea:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, this->_internal_defender_in_defense_area(), output);
      break;
    case kMultipleCards:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, this->_internal_multiple_cards(), output);
      break;
    case kMultiplePlacementFailures:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, this->_internal_multiple_placement_failures(), output);
      break;
    case kMultipleFouls:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, this->_internal_multiple_fouls(), output);
      break;
    case kUnsportingBehaviorMinor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, this->_internal_unsporting_behavior_minor(), output);
      break;
    case kUnsportingBehaviorMajor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        36, this->_internal_unsporting_behavior_major(), output);
      break;
    case kBotSubstitution:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        37, this->_internal_bot_substitution(), output);
      break;
    case kTooManyRobots:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        38, this->_internal_too_many_robots(), output);
      break;
    case kPossibleGoal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        39, this->_internal_possible_goal(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required .GameEventType type = 40;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->type(), output);
  }

  // repeated string origin = 41;
  for (int i = 0, n = this->origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin(i).data(), static_cast<int>(this->origin(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.origin");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->origin(i), output);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->_internal_attacker_touched_opponent_in_defense_area_skipped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEvent)
}

::google::protobuf::uint8* GameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kPrepared:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_prepared(), deterministic, target);
      break;
    case kNoProgressInGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_no_progress_in_game(), deterministic, target);
      break;
    case kPlacementFailed:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_placement_failed(), deterministic, target);
      break;
    case kPlacementSucceeded:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_placement_succeeded(), deterministic, target);
      break;
    case kBallLeftFieldTouchLine:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_ball_left_field_touch_line(), deterministic, target);
      break;
    case kBallLeftFieldGoalLine:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_ball_left_field_goal_line(), deterministic, target);
      break;
    case kGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_goal(), deterministic, target);
      break;
    case kIndirectGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_indirect_goal(), deterministic, target);
      break;
    case kChippedGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_chipped_goal(), deterministic, target);
      break;
    case kAimlessKick:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_aimless_kick(), deterministic, target);
      break;
    case kKickTimeout:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_kick_timeout(), deterministic, target);
      break;
    case kKeeperHeldBall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_keeper_held_ball(), deterministic, target);
      break;
    case kAttackerDoubleTouchedBall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_attacker_double_touched_ball(), deterministic, target);
      break;
    case kAttackerTouchedBallInDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_attacker_touched_ball_in_defense_area(), deterministic, target);
      break;
    case kAttackerTouchedOpponentInDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, this->_internal_attacker_touched_opponent_in_defense_area(), deterministic, target);
      break;
    case kBotDribbledBallTooFar:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_bot_dribbled_ball_too_far(), deterministic, target);
      break;
    case kBotKickedBallTooFast:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_bot_kicked_ball_too_fast(), deterministic, target);
      break;
    case kAttackerTooCloseToDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_attacker_too_close_to_defense_area(), deterministic, target);
      break;
    case kBotInterferedPlacement:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, this->_internal_bot_interfered_placement(), deterministic, target);
      break;
    case kBotCrashDrawn:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, this->_internal_bot_crash_drawn(), deterministic, target);
      break;
    case kBotCrashUnique:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          22, this->_internal_bot_crash_unique(), deterministic, target);
      break;
    case kBotCrashUniqueSkipped:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          23, this->_internal_bot_crash_unique_skipped(), deterministic, target);
      break;
    case kBotPushedBot:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          24, this->_internal_bot_pushed_bot(), deterministic, target);
      break;
    case kBotPushedBotSkipped:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          25, this->_internal_bot_pushed_bot_skipped(), deterministic, target);
      break;
    case kBotHeldBallDeliberately:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          26, this->_internal_bot_held_ball_deliberately(), deterministic, target);
      break;
    case kBotTippedOver:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          27, this->_internal_bot_tipped_over(), deterministic, target);
      break;
    case kBotTooFastInStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          28, this->_internal_bot_too_fast_in_stop(), deterministic, target);
      break;
    case kDefenderTooCloseToKickPoint:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          29, this->_internal_defender_too_close_to_kick_point(), deterministic, target);
      break;
    case kDefenderInDefenseAreaPartially:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          30, this->_internal_defender_in_defense_area_partially(), deterministic, target);
      break;
    case kDefenderInDefenseArea:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          31, this->_internal_defender_in_defense_area(), deterministic, target);
      break;
    case kMultipleCards:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          32, this->_internal_multiple_cards(), deterministic, target);
      break;
    case kMultiplePlacementFailures:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          33, this->_internal_multiple_placement_failures(), deterministic, target);
      break;
    case kMultipleFouls:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          34, this->_internal_multiple_fouls(), deterministic, target);
      break;
    case kUnsportingBehaviorMinor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          35, this->_internal_unsporting_behavior_minor(), deterministic, target);
      break;
    case kUnsportingBehaviorMajor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          36, this->_internal_unsporting_behavior_major(), deterministic, target);
      break;
    case kBotSubstitution:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          37, this->_internal_bot_substitution(), deterministic, target);
      break;
    case kTooManyRobots:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          38, this->_internal_too_many_robots(), deterministic, target);
      break;
    case kPossibleGoal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          39, this->_internal_possible_goal(), deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required .GameEventType type = 40;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->type(), target);
  }

  // repeated string origin = 41;
  for (int i = 0, n = this->origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin(i).data(), static_cast<int>(this->origin(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameEvent.origin");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(41, this->origin(i), target);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->_internal_attacker_touched_opponent_in_defense_area_skipped(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent)
  return target;
}

size_t GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .GameEventType type = 40;
  if (has_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated string origin = 41;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->origin_size());
  for (int i = 0, n = this->origin_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->origin(i));
  }

  switch (event_case()) {
    // optional .GameEvent.Prepared prepared = 1;
    case kPrepared: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.prepared_);
      break;
    }
    // optional .GameEvent.NoProgressInGame no_progress_in_game = 2;
    case kNoProgressInGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.no_progress_in_game_);
      break;
    }
    // optional .GameEvent.PlacementFailed placement_failed = 3;
    case kPlacementFailed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.placement_failed_);
      break;
    }
    // optional .GameEvent.PlacementSucceeded placement_succeeded = 5;
    case kPlacementSucceeded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.placement_succeeded_);
      break;
    }
    // optional .GameEvent.BotSubstitution bot_substitution = 37;
    case kBotSubstitution: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_substitution_);
      break;
    }
    // optional .GameEvent.TooManyRobots too_many_robots = 38;
    case kTooManyRobots: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.too_many_robots_);
      break;
    }
    // optional .GameEvent.BallLeftField ball_left_field_touch_line = 6;
    case kBallLeftFieldTouchLine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.ball_left_field_touch_line_);
      break;
    }
    // optional .GameEvent.BallLeftField ball_left_field_goal_line = 7;
    case kBallLeftFieldGoalLine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.ball_left_field_goal_line_);
      break;
    }
    // optional .GameEvent.Goal possible_goal = 39;
    case kPossibleGoal: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.possible_goal_);
      break;
    }
    // optional .GameEvent.Goal goal = 8;
    case kGoal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.goal_);
      break;
    }
    // optional .GameEvent.IndirectGoal indirect_goal = 9;
    case kIndirectGoal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.indirect_goal_);
      break;
    }
    // optional .GameEvent.ChippedGoal chipped_goal = 10;
    case kChippedGoal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.chipped_goal_);
      break;
    }
    // optional .GameEvent.AimlessKick aimless_kick = 11;
    case kAimlessKick: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.aimless_kick_);
      break;
    }
    // optional .GameEvent.KickTimeout kick_timeout = 12;
    case kKickTimeout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.kick_timeout_);
      break;
    }
    // optional .GameEvent.KeeperHeldBall keeper_held_ball = 13;
    case kKeeperHeldBall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.keeper_held_ball_);
      break;
    }
    // optional .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
    case kAttackerDoubleTouchedBall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.attacker_double_touched_ball_);
      break;
    }
    // optional .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
    case kAttackerTouchedBallInDefenseArea: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.attacker_touched_ball_in_defense_area_);
      break;
    }
    // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
    case kAttackerTouchedOpponentInDefenseArea: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.attacker_touched_opponent_in_defense_area_);
      break;
    }
    // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.attacker_touched_opponent_in_defense_area_skipped_);
      break;
    }
    // optional .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
    case kBotDribbledBallTooFar: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_dribbled_ball_too_far_);
      break;
    }
    // optional .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
    case kBotKickedBallTooFast: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_kicked_ball_too_fast_);
      break;
    }
    // optional .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
    case kAttackerTooCloseToDefenseArea: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.attacker_too_close_to_defense_area_);
      break;
    }
    // optional .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
    case kBotInterferedPlacement: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_interfered_placement_);
      break;
    }
    // optional .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
    case kBotCrashDrawn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_crash_drawn_);
      break;
    }
    // optional .GameEvent.BotCrashUnique bot_crash_unique = 22;
    case kBotCrashUnique: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_crash_unique_);
      break;
    }
    // optional .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23;
    case kBotCrashUniqueSkipped: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_crash_unique_skipped_);
      break;
    }
    // optional .GameEvent.BotPushedBot bot_pushed_bot = 24;
    case kBotPushedBot: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_pushed_bot_);
      break;
    }
    // optional .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25;
    case kBotPushedBotSkipped: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_pushed_bot_skipped_);
      break;
    }
    // optional .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
    case kBotHeldBallDeliberately: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_held_ball_deliberately_);
      break;
    }
    // optional .GameEvent.BotTippedOver bot_tipped_over = 27;
    case kBotTippedOver: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_tipped_over_);
      break;
    }
    // optional .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
    case kBotTooFastInStop: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.bot_too_fast_in_stop_);
      break;
    }
    // optional .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
    case kDefenderTooCloseToKickPoint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.defender_too_close_to_kick_point_);
      break;
    }
    // optional .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
    case kDefenderInDefenseAreaPartially: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.defender_in_defense_area_partially_);
      break;
    }
    // optional .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
    case kDefenderInDefenseArea: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.defender_in_defense_area_);
      break;
    }
    // optional .GameEvent.MultipleCards multiple_cards = 32;
    case kMultipleCards: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.multiple_cards_);
      break;
    }
    // optional .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33;
    case kMultiplePlacementFailures: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.multiple_placement_failures_);
      break;
    }
    // optional .GameEvent.MultipleFouls multiple_fouls = 34;
    case kMultipleFouls: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.multiple_fouls_);
      break;
    }
    // optional .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
    case kUnsportingBehaviorMinor: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.unsporting_behavior_minor_);
      break;
    }
    // optional .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
    case kUnsportingBehaviorMajor: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.unsporting_behavior_major_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent)
    MergeFrom(*source);
  }
}

void GameEvent::MergeFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  origin_.MergeFrom(from.origin_);
  if (from.has_type()) {
    set_type(from.type());
  }
  switch (from.event_case()) {
    case kPrepared: {
      mutable_prepared()->::GameEvent_Prepared::MergeFrom(from.prepared());
      break;
    }
    case kNoProgressInGame: {
      mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(from.no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(from.placement_failed());
      break;
    }
    case kPlacementSucceeded: {
      mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(from.placement_succeeded());
      break;
    }
    case kBotSubstitution: {
      mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(from.bot_substitution());
      break;
    }
    case kTooManyRobots: {
      mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(from.too_many_robots());
      break;
    }
    case kBallLeftFieldTouchLine: {
      mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(from.ball_left_field_goal_line());
      break;
    }
    case kPossibleGoal: {
      mutable_possible_goal()->::GameEvent_Goal::MergeFrom(from.possible_goal());
      break;
    }
    case kGoal: {
      mutable_goal()->::GameEvent_Goal::MergeFrom(from.goal());
      break;
    }
    case kIndirectGoal: {
      mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(from.indirect_goal());
      break;
    }
    case kChippedGoal: {
      mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(from.chipped_goal());
      break;
    }
    case kAimlessKick: {
      mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(from.aimless_kick());
      break;
    }
    case kKickTimeout: {
      mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(from.kick_timeout());
      break;
    }
    case kKeeperHeldBall: {
      mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(from.keeper_held_ball());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(from.attacker_double_touched_ball());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(from.attacker_touched_ball_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotDribbledBallTooFar: {
      mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(from.bot_dribbled_ball_too_far());
      break;
    }
    case kBotKickedBallTooFast: {
      mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(from.bot_kicked_ball_too_fast());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(from.attacker_too_close_to_defense_area());
      break;
    }
    case kBotInterferedPlacement: {
      mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(from.bot_interfered_placement());
      break;
    }
    case kBotCrashDrawn: {
      mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(from.bot_crash_drawn());
      break;
    }
    case kBotCrashUnique: {
      mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique());
      break;
    }
    case kBotCrashUniqueSkipped: {
      mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBot: {
      mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot());
      break;
    }
    case kBotPushedBotSkipped: {
      mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot_skipped());
      break;
    }
    case kBotHeldBallDeliberately: {
      mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(from.bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(from.bot_tipped_over());
      break;
    }
    case kBotTooFastInStop: {
      mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(from.bot_too_fast_in_stop());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(from.defender_too_close_to_kick_point());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(from.defender_in_defense_area_partially());
      break;
    }
    case kDefenderInDefenseArea: {
      mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(from.defender_in_defense_area());
      break;
    }
    case kMultipleCards: {
      mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(from.multiple_cards());
      break;
    }
    case kMultiplePlacementFailures: {
      mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(from.multiple_placement_failures());
      break;
    }
    case kMultipleFouls: {
      mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(from.multiple_fouls());
      break;
    }
    case kUnsportingBehaviorMinor: {
      mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(from.unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(from.unsporting_behavior_major());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (event_case()) {
    case kPrepared: {
      break;
    }
    case kNoProgressInGame: {
      if (has_no_progress_in_game()) {
        if (!this->no_progress_in_game().IsInitialized()) return false;
      }
      break;
    }
    case kPlacementFailed: {
      if (has_placement_failed()) {
        if (!this->placement_failed().IsInitialized()) return false;
      }
      break;
    }
    case kPlacementSucceeded: {
      if (has_placement_succeeded()) {
        if (!this->placement_succeeded().IsInitialized()) return false;
      }
      break;
    }
    case kBotSubstitution: {
      if (has_bot_substitution()) {
        if (!this->bot_substitution().IsInitialized()) return false;
      }
      break;
    }
    case kTooManyRobots: {
      if (has_too_many_robots()) {
        if (!this->too_many_robots().IsInitialized()) return false;
      }
      break;
    }
    case kBallLeftFieldTouchLine: {
      if (has_ball_left_field_touch_line()) {
        if (!this->ball_left_field_touch_line().IsInitialized()) return false;
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (has_ball_left_field_goal_line()) {
        if (!this->ball_left_field_goal_line().IsInitialized()) return false;
      }
      break;
    }
    case kPossibleGoal: {
      if (has_possible_goal()) {
        if (!this->possible_goal().IsInitialized()) return false;
      }
      break;
    }
    case kGoal: {
      if (has_goal()) {
        if (!this->goal().IsInitialized()) return false;
      }
      break;
    }
    case kIndirectGoal: {
      if (has_indirect_goal()) {
        if (!this->indirect_goal().IsInitialized()) return false;
      }
      break;
    }
    case kChippedGoal: {
      if (has_chipped_goal()) {
        if (!this->chipped_goal().IsInitialized()) return false;
      }
      break;
    }
    case kAimlessKick: {
      if (has_aimless_kick()) {
        if (!this->aimless_kick().IsInitialized()) return false;
      }
      break;
    }
    case kKickTimeout: {
      if (has_kick_timeout()) {
        if (!this->kick_timeout().IsInitialized()) return false;
      }
      break;
    }
    case kKeeperHeldBall: {
      if (has_keeper_held_ball()) {
        if (!this->keeper_held_ball().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (has_attacker_double_touched_ball()) {
        if (!this->attacker_double_touched_ball().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (has_attacker_touched_ball_in_defense_area()) {
        if (!this->attacker_touched_ball_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (has_attacker_touched_opponent_in_defense_area()) {
        if (!this->attacker_touched_opponent_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (has_attacker_touched_opponent_in_defense_area_skipped()) {
        if (!this->attacker_touched_opponent_in_defense_area_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (has_bot_dribbled_ball_too_far()) {
        if (!this->bot_dribbled_ball_too_far().IsInitialized()) return false;
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (has_bot_kicked_ball_too_fast()) {
        if (!this->bot_kicked_ball_too_fast().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (has_attacker_too_close_to_defense_area()) {
        if (!this->attacker_too_close_to_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (has_bot_interfered_placement()) {
        if (!this->bot_interfered_placement().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashDrawn: {
      if (has_bot_crash_drawn()) {
        if (!this->bot_crash_drawn().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUnique: {
      if (has_bot_crash_unique()) {
        if (!this->bot_crash_unique().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (has_bot_crash_unique_skipped()) {
        if (!this->bot_crash_unique_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBot: {
      if (has_bot_pushed_bot()) {
        if (!this->bot_pushed_bot().IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (has_bot_pushed_bot_skipped()) {
        if (!this->bot_pushed_bot_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (has_bot_held_ball_deliberately()) {
        if (!this->bot_held_ball_deliberately().IsInitialized()) return false;
      }
      break;
    }
    case kBotTippedOver: {
      if (has_bot_tipped_over()) {
        if (!this->bot_tipped_over().IsInitialized()) return false;
      }
      break;
    }
    case kBotTooFastInStop: {
      if (has_bot_too_fast_in_stop()) {
        if (!this->bot_too_fast_in_stop().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (has_defender_too_close_to_kick_point()) {
        if (!this->defender_too_close_to_kick_point().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (has_defender_in_defense_area_partially()) {
        if (!this->defender_in_defense_area_partially().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (has_defender_in_defense_area()) {
        if (!this->defender_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kMultipleCards: {
      if (has_multiple_cards()) {
        if (!this->multiple_cards().IsInitialized()) return false;
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (has_multiple_placement_failures()) {
        if (!this->multiple_placement_failures().IsInitialized()) return false;
      }
      break;
    }
    case kMultipleFouls: {
      if (has_multiple_fouls()) {
        if (!this->multiple_fouls().IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (has_unsporting_behavior_minor()) {
        if (!this->unsporting_behavior_minor().IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (has_unsporting_behavior_major()) {
        if (!this->unsporting_behavior_major().IsInitialized()) return false;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void GameEvent::Swap(GameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameEvent::InternalSwap(GameEvent* other) {
  using std::swap;
  origin_.InternalSwap(CastToBase(&other->origin_));
  swap(type_, other->type_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameEvent::GetMetadata() const {
  protobuf_ssl_5fgame_5fevent_5f2019_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgame_5fevent_5f2019_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BallLeftField* Arena::CreateMaybeMessage< ::GameEvent_BallLeftField >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BallLeftField >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_AimlessKick* Arena::CreateMaybeMessage< ::GameEvent_AimlessKick >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_AimlessKick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_Goal* Arena::CreateMaybeMessage< ::GameEvent_Goal >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_Goal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_IndirectGoal* Arena::CreateMaybeMessage< ::GameEvent_IndirectGoal >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_IndirectGoal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_ChippedGoal* Arena::CreateMaybeMessage< ::GameEvent_ChippedGoal >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_ChippedGoal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotTooFastInStop* Arena::CreateMaybeMessage< ::GameEvent_BotTooFastInStop >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotTooFastInStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_DefenderTooCloseToKickPoint* Arena::CreateMaybeMessage< ::GameEvent_DefenderTooCloseToKickPoint >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_DefenderTooCloseToKickPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotCrashDrawn* Arena::CreateMaybeMessage< ::GameEvent_BotCrashDrawn >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotCrashDrawn >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotCrashUnique* Arena::CreateMaybeMessage< ::GameEvent_BotCrashUnique >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotCrashUnique >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotPushedBot* Arena::CreateMaybeMessage< ::GameEvent_BotPushedBot >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotPushedBot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotTippedOver* Arena::CreateMaybeMessage< ::GameEvent_BotTippedOver >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotTippedOver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_DefenderInDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_DefenderInDefenseArea >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_DefenderInDefenseArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_DefenderInDefenseAreaPartially* Arena::CreateMaybeMessage< ::GameEvent_DefenderInDefenseAreaPartially >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_DefenderInDefenseAreaPartially >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_AttackerTouchedBallInDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_AttackerTouchedBallInDefenseArea >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_AttackerTouchedBallInDefenseArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotKickedBallTooFast* Arena::CreateMaybeMessage< ::GameEvent_BotKickedBallTooFast >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotKickedBallTooFast >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotDribbledBallTooFar* Arena::CreateMaybeMessage< ::GameEvent_BotDribbledBallTooFar >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotDribbledBallTooFar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_AttackerTouchedOpponentInDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_AttackerTouchedOpponentInDefenseArea >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_AttackerTouchedOpponentInDefenseArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_AttackerDoubleTouchedBall* Arena::CreateMaybeMessage< ::GameEvent_AttackerDoubleTouchedBall >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_AttackerDoubleTouchedBall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_AttackerTooCloseToDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_AttackerTooCloseToDefenseArea >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_AttackerTooCloseToDefenseArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotHeldBallDeliberately* Arena::CreateMaybeMessage< ::GameEvent_BotHeldBallDeliberately >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotHeldBallDeliberately >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotInterferedPlacement* Arena::CreateMaybeMessage< ::GameEvent_BotInterferedPlacement >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotInterferedPlacement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_MultipleCards* Arena::CreateMaybeMessage< ::GameEvent_MultipleCards >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_MultipleCards >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_MultipleFouls* Arena::CreateMaybeMessage< ::GameEvent_MultipleFouls >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_MultipleFouls >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_MultiplePlacementFailures* Arena::CreateMaybeMessage< ::GameEvent_MultiplePlacementFailures >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_MultiplePlacementFailures >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_KickTimeout* Arena::CreateMaybeMessage< ::GameEvent_KickTimeout >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_KickTimeout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_NoProgressInGame* Arena::CreateMaybeMessage< ::GameEvent_NoProgressInGame >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_NoProgressInGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_PlacementFailed* Arena::CreateMaybeMessage< ::GameEvent_PlacementFailed >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_PlacementFailed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_UnsportingBehaviorMinor* Arena::CreateMaybeMessage< ::GameEvent_UnsportingBehaviorMinor >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_UnsportingBehaviorMinor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_UnsportingBehaviorMajor* Arena::CreateMaybeMessage< ::GameEvent_UnsportingBehaviorMajor >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_UnsportingBehaviorMajor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_KeeperHeldBall* Arena::CreateMaybeMessage< ::GameEvent_KeeperHeldBall >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_KeeperHeldBall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_PlacementSucceeded* Arena::CreateMaybeMessage< ::GameEvent_PlacementSucceeded >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_PlacementSucceeded >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_Prepared* Arena::CreateMaybeMessage< ::GameEvent_Prepared >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_Prepared >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_BotSubstitution* Arena::CreateMaybeMessage< ::GameEvent_BotSubstitution >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_BotSubstitution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent_TooManyRobots* Arena::CreateMaybeMessage< ::GameEvent_TooManyRobots >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent_TooManyRobots >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameEvent* Arena::CreateMaybeMessage< ::GameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::GameEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
